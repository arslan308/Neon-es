{%- assign color_label = 'color,colour,couleur,cor,colore,farbe,색,色,カラー,färg,farve,szín,barva' | split: ',' -%}
{%- assign items_per_page = cart.attributes.collection_products_per_page
  | default: section.settings.default_products_per_page
-%}
{%- assign quick_links_menu = section.settings.quick_links -%}
{% assign IsUpdated = false %}
{% if template.suffix == 'updated_collection' %}
  {% assign IsUpdated = true %}
  <style>
    .layout__section.WithPagination {
      display: none !important;
    }
    .layout__section.WithPagination.withhidden {
      display: block !important;
    }
    .layout__section.WithoutPagination {
      display: none !important;
    }
    .layout__section.WithoutPagination.withouthidden {
      display: block !important;
    }
    .price-filter-btn-mainwrapper.forCustomCss .priceinputholder {
      display: flex;
      flex-direction: column;
      flex-wrap: wrap;
      gap: 5px;
      color: black;
      width: 80%;
    }
    span.forfullwidthSpan {
      width: 100%;
      color: black;
    }
    .price-filter-btn-mainwrapper.forCustomCss.active span.forfullwidthSpan {
      color: #ec40a4;
      font-weight: 700;
    }
    .ForDisplayNone {
      display: none;
    }
    .form__field_Custom {
      display: block;
      padding: 5px;
      border-radius: 2px;
      border: 1px solid #d4d6d8;
      width: 90%;
      line-height: normal;
      height: unset;
      color: black;
      background: white;
      -webkit-appearance: none;
      resize: none;
      font-size: 1rem;
      font-size: max(1rem, 16px);
      box-shadow: 0 1px rgba(225, 227, 228, 0.25) inset;
      transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out, color 0.2s ease-in-out;
    }
    .price-filter-btn-mainwrapper.hidden-price.forCustomCss {
      gap: 4px;
    }
    .range-group {
      background: linear-gradient(
        to right,
        var(--border-color) var(--range-min),
        #ec40a4,
        #ec40a4,
        var(--border-color) var(--range-max)
      );
    }
    input[type='range']::-webkit-slider-thumb {
      background: #ec40a4 !important; /* your desired color */
    }
    span.forfullwidthSpan.form__input-wrapper.form__input-wrapper--labelled {
      margin-bottom: 0;
    }
    .collection__mobile-active-filters,
    span.collection__mobile-active-filters-results,
    .card__section.collection__mobile-filters-recap.hidden-lap-and-up {
      display: none;
    }
    .price-range {
      padding: 5px 0;
    }
  </style>
{% endif %}

{%- if quick_links_menu.links.size > 0 or section.settings.show_filters and collection.filters != empty -%}
  {%- assign has_filters = true -%}
{%- else -%}
  {%- assign has_filters = false -%}
{%- endif -%}

{%- if has_filters -%}
  {%- capture grid_classes -%}1/3--tablet-and-up 1/{{ section.settings.products_per_row }}--desk{%- endcapture -%}
{%- else -%}
  {%- capture grid_classes -%}1/3--tablet 1/{{ section.settings.products_per_row }}--lap-and-up{%- endcapture -%}
{%- endif -%}

{%- assign view_mode = cart.attributes.collection_layout | default: section.settings.default_view_layout -%}
{%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}

{%- assign active_filters_count = 0 -%}

{%- for filter in collection.filters -%}
  {%- if filter.type == 'list' -%}
    {%- assign active_filters_count = active_filters_count | plus: filter.active_values.size -%}
  {%- elsif filter.type == 'price_range' and filter.min_value.value or filter.max_value.value -%}
    {%- assign active_filters_count = active_filters_count | plus: 1 -%}
  {%- elsif filter.type == 'boolean' and filter.true_value.active %}
    {%- assign active_filters_count = active_filters_count | plus: 1 -%}
  {%- endif -%}
{%- endfor -%}

{%- capture section_settings -%}
{
  "currentSortBy": {{ sort_by | json }},
  "defaultLayout": {{ section.settings.default_view_layout | json }},
  "defaultProductsPerPage": {{ section.settings.default_products_per_page | json }},
  "gridClasses": {{ grid_classes | json }}
}
{%- endcapture -%}

<section
  class="product-list-main"
  data-section-id="{{ section.id }}"
  data-section-type="collection"
  data-section-settings="{{ section_settings | escape_once }}"
>
  <div class="container container--flush">
    <div
      {% if has_filters %}
        class="layout main-collection-layout"
      {% endif %}
      style="margin-top: 48px;"
    >
      {%- if has_filters -%}
        {% if template.suffix != 'updated_collection' %}
          <div class="layout__section layout__section--secondary hidden-pocket">
            <div class="card">
              {%- if quick_links_menu.links.size > 0 -%}
                <div class="card__section card__section--tight">
                  <p class="card__title--small heading">{{ quick_links_menu.title }}</p>

                  <ul class="collection__filter-linklist" role="list">
                    {%- for link in quick_links_menu.links -%}
                      <li>
                        {%- if link.links.size > 0 -%}
                          {%- capture link_id -%}filter-{% increment link_id %}{%- endcapture -%}

                          <button
                            type="button"
                            class="collection__filter-link link link--primary {% if link.active or link.child_active %}is-active{% endif %}"
                            data-action="toggle-collapsible"
                            aria-controls="{{ link_id }}"
                            aria-expanded="{% if link.active or link.child_active %}true{% else %}false{% endif %}"
                          >
                            {{ link.title }}
                            {% if link.type == 'collection_link'
                              and section.settings.quick_links_show_products_count
                            -%}
                              ({{ link.object.products_count }})
                            {%- endif %}
                            {%- render 'icon', icon: 'arrow-bottom' -%}
                          </button>

                          <div
                            id="{{ link_id }}"
                            class="collection__filter-collapsible"
                            {% if link.active or link.child_active %}
                              aria-hidden="false" style="height: auto;"
                            {% else %}
                              aria-hidden="true"
                            {% endif %}
                          >
                            <ul class="collection__filter-linklist" role="list">
                              {%- for sub_link in link.links -%}
                                <li>
                                  {%- if sub_link.links.size > 0 -%}
                                    {%- capture link_id -%}filter-{% increment link_id %}{%- endcapture -%}

                                    <button
                                      type="button"
                                      class="collection__filter-link link link--primary {% if sub_link.active or sub_link.child_active %}is-active{% endif %}"
                                      data-action="toggle-collapsible"
                                      aria-controls="{{ link_id }}"
                                      aria-expanded="{% if sub_link.active or sub_link.child_active %}true{% else %}false{% endif %}"
                                    >
                                      {{ sub_link.title }}
                                      {% if sub_link.type == 'collection_link'
                                        and section.settings.quick_links_show_products_count
                                      -%}
                                        ({{ sub_link.object.products_count }})
                                      {%- endif %}
                                      {%- render 'icon', icon: 'arrow-bottom' -%}
                                    </button>

                                    <div
                                      id="{{ link_id }}"
                                      class="collection__filter-collapsible"
                                      {% if sub_link.active or sub_link.child_active %}
                                        aria-hidden="false" style="height: auto;"
                                      {% else %}
                                        aria-hidden="true"
                                      {% endif %}
                                    >
                                      <ul class="collection__filter-linklist" role="list">
                                        {%- for sub_sub_link in sub_link.links -%}
                                          <li>
                                            <a
                                              href="{{ sub_sub_link.url }}"
                                              class="collection__filter-link link link--primary {% if sub_sub_link.active %}is-active{% endif %}"
                                            >
                                              {{- sub_sub_link.title }}
                                              {% if sub_sub_link.type == 'collection_link'
                                                and section.settings.quick_links_show_products_count
                                              -%}
                                                ({{ sub_sub_link.object.products_count }})
                                              {%- endif -%}
                                            </a>
                                          </li>
                                        {%- endfor -%}
                                      </ul>
                                    </div>
                                  {%- else -%}
                                    <a
                                      href="{{ sub_link.url }}"
                                      class="collection__filter-link link link--primary {% if sub_link.active %}is-active{% endif %}"
                                    >
                                      {{- sub_link.title }}
                                      {% if sub_link.type == 'collection_link'
                                        and section.settings.quick_links_show_products_count
                                      -%}
                                        ({{ sub_link.object.products_count }})
                                      {%- endif -%}
                                    </a>
                                  {%- endif -%}
                                </li>
                              {%- endfor -%}
                            </ul>
                          </div>
                        {%- else -%}
                          <a
                            href="{{ link.url }}"
                            class="collection__filter-link link link--primary {% if link.active %}is-active{% endif %}"
                          >
                            {{- link.title }}
                            {% if link.type == 'collection_link'
                              and section.settings.quick_links_show_products_count
                            -%}
                              ({{ link.object.products_count }})
                            {%- endif -%}
                          </a>
                        {%- endif -%}
                      </li>
                    {%- endfor -%}
                  </ul>
                </div>
              {%- endif -%}

              {%- if section.settings.show_filters and collection.filters != empty -%}
                <form id="desktop-filters-form" class="card__section card__section--tight">
                  <input type="hidden" name="sort_by" value="{{ sort_by }}">

                  {%- if collection.current_type != blank or collection.current_vendor != blank -%}
                    <input
                      type="hidden"
                      name="q"
                      value="{{ collection.current_vendor | default: collection.current_type | escape }}"
                    >
                  {%- endif -%}

                  <p class="card__title--small heading">{{ 'collection.filter.all' | t }}</p>

                  <div class="collection__active-filters">
                    {%- assign active_filter_values = 0 -%}

                    {%- for filter in collection.filters -%}
                      {%- if filter.type == 'list' -%}
                        {%- for filter_value in filter.active_values -%}
                          {%- assign active_filter_values = active_filter_values | plus: 1 -%}

                          <label
                            for="{{ filter_value.param_name }}-{{ filter_value.value }}"
                            class="collection__active-filter-item"
                          >
                            <span class="collection__active-filter-cross">{% render 'icon', icon: 'close' %}</span>
                            {{- filter_value.label -}}
                          </label>
                        {%- endfor -%}
                      {%- elsif filter.type == 'price_range' and filter.min_value.value or filter.max_value.value -%}
                        <button
                          type="button"
                          class="collection__active-filter-item"
                          data-action="clear-filters"
                          data-url="{{ filter.url_to_remove | escape }}"
                        >
                          <span class="collection__active-filter-cross">{% render 'icon', icon: 'close' %}</span>
                          {{- filter.min_value.value | default: 0 | money_without_trailing_zeros }} -
                          {{ filter.max_value.value | default: filter.range_max | money_without_trailing_zeros -}}
                        </button>
                      {%- elsif filter.type == 'boolean' and filter.true_value.active -%}
                        <label for="{{ filter.param_name }}" class="collection__active-filter-item">
                          <span class="collection__active-filter-cross">{% render 'icon', icon: 'close' %}</span>
                          {{- filter.label -}}
                        </label>
                      {%- endif -%}
                    {%- endfor -%}

                    {%- if active_filter_values > 0 -%}
                      <button
                        type="button"
                        class="collection__clear-filter button button--small button--transparent button--full"
                        data-action="clear-filters"
                        data-url="{{ collection.url }}?sort_by={{ sort_by }}"
                      >
                        {{ 'collection.filter.clear_all' | t }}
                      </button>
                    {%- endif -%}
                  </div>

                  <div class="collection__filter-group-list">
                    {%- for filter in collection.filters -%}
                      {%- if template.suffix == 'brand'
                        and filter.param_name == 'filter.p.vendor'
                        and filter.values.size == 1
                      -%}
                        {%- continue -%}
                      {%- endif -%}

                      {%- assign filter_label_downcase = filter.label | downcase -%}
                      {%- assign is_filter_expanded = false -%}

                      {%- if color_label contains filter_label_downcase
                        and section.settings.show_filter_color_swatch
                      -%}
                        {%- assign show_color_swatch = true -%}
                      {%- else -%}
                        {%- assign show_color_swatch = false -%}
                      {%- endif -%}

                      {%- if section.settings.open_group_filters_mode == 'all_open'
                        or section.settings.open_group_filters_mode == 'first_open'
                        and forloop.first
                      -%}
                        {%- assign is_filter_expanded = true -%}
                      {%- endif -%}

                      <div class="collection__filter-group">
                        {%- if filter.type == 'price_range' or filter.type == 'list' -%}
                          <button
                            type="button"
                            class="collection__filter-group-name link link--secondary text--strong"
                            data-action="toggle-collapsible"
                            aria-controls="{{ filter.param_name | handle | escape }}"
                            data-close-siblings="false"
                            data-collapsible-force-overflow="true"
                            {% if is_filter_expanded %}
                              aria-expanded="true"
                            {% else %}
                              aria-expanded="false"
                            {% endif %}
                          >
                            {{- filter.label -}}
                            {%- render 'icon', icon: 'arrow-bottom' -%}
                          </button>
                        {%- elsif filter.type == 'boolean' -%}
                          <div class="collection__filter-group-name link link--secondary text--strong">
                            <label for="{{ filter.param_name }}">{{- filter.label -}}</label>
                            <input
                              class="switch-checkbox"
                              type="checkbox"
                              name="{{ filter.param_name }}"
                              id="{{ filter.param_name }}"
                              value="1"
                              {% if filter.true_value.active %}
                                checked
                              {% endif %}
                            >
                          </div>
                        {%- endif -%}

                        {%- unless filter.type == 'boolean' %}
                          <div
                            id="{{ filter.param_name | handle | escape }}"
                            class="collection__filter-collapsible"
                            {% if is_filter_expanded %}
                              aria-hidden="false" style="height: auto; overflow: visible"
                            {% else %}
                              aria-hidden="true"
                            {% endif %}
                          >
                            {%- case filter.type -%}
                              {%- when 'list' -%}
                                {%- if filter.presentation == 'image' -%}
                                  <div class="collection__filter-visual-filter-list">
                                    <div class="visual-filter-list">
                                      {%- for filter_value in filter.values -%}
                                        {%- assign downcased_label = filter_value.label | downcase -%}

                                        <div class="visual-filter">
                                          <input
                                            class="visual-filter__radio"
                                            type="checkbox"
                                            name="{{ filter_value.param_name }}"
                                            id="{{ filter_value.param_name }}-{{ filter_value.value }}"
                                            value="{{ filter_value.value }}"
                                            {% if filter_value.active %}
                                              checked
                                            {% endif %}
                                          >

                                          <label
                                            for="{{ filter_value.param_name }}-{{ filter_value.value }}"
                                            class="visual-filter__item {% if filter_value.active %}is-selected{% endif %}"
                                          >
                                            {%- if filter_value.image != blank -%}
                                              {{-
                                                filter_value.image
                                                | image_url: width: filter_value.image.width
                                                | image_tag: loading: 'lazy', widths: '32,64,96'
                                              -}}
                                            {%- endif -%}

                                            <span>{{- filter_value.label -}}</span>
                                          </label>
                                        </div>
                                      {%- endfor -%}
                                    </div>
                                  </div>
                                {%- elsif filter.presentation == 'swatch' -%}
                                  <div class="collection__filter-color-list">
                                    <div class="color-swatch-list color-swatch-list--large">
                                      {%- for filter_value in filter.values -%}
                                        {%- assign downcased_label = filter_value.label | downcase -%}

                                        <div
                                          class="color-swatch {% if downcased_label == 'white' or downcased_label == 'blanc' %}color-swatch--white{% endif %}"
                                          data-tooltip="{{ filter_value.label | escape }}"
                                        >
                                          <input
                                            class="color-swatch__radio"
                                            type="checkbox"
                                            name="{{ filter_value.param_name }}"
                                            id="{{ filter_value.param_name }}-{{ filter_value.value }}"
                                            value="{{ filter_value.value }}"
                                            {% if filter_value.active %}
                                              checked
                                            {% endif %}
                                          >

                                          <label
                                            for="{{ filter_value.param_name }}-{{ filter_value.value }}"
                                            class="color-swatch__item {% if filter_value.active %}is-selected{% endif %}"
                                            aria-label="{{ filter_value.label | escape }}"
                                          >
                                            <span
                                              class="color-swatch__item"
                                              style="{% render 'color-swatch-style', swatch: filter_value.swatch %}"
                                            ></span>
                                          </label>
                                        </div>
                                      {%- endfor -%}
                                    </div>
                                  </div>
                                {%- elsif show_color_swatch -%}
                                  <div class="collection__filter-color-list">
                                    <div class="color-swatch-list color-swatch-list--large">
                                      {%- assign color_swatch_config = settings.color_swatch_config
                                        | newline_to_br
                                        | split: '<br />'
                                      -%}

                                      {%- for filter_value in filter.values -%}
                                        {%- capture color_id -%}filter-color-{% increment color_index %}{%- endcapture -%}

                                        {%- assign downcased_value = filter_value.label | downcase -%}

                                        <div
                                          class="color-swatch {% if downcased_value == 'white' or downcased_value == 'blanc' %}color-swatch--white{% endif %}"
                                          data-tooltip="{{ filter_value.label | escape }}"
                                        >
                                          <input
                                            class="color-swatch__radio"
                                            type="checkbox"
                                            name="{{ filter.param_name }}"
                                            id="{{ filter_value.param_name }}-{{ filter_value.value }}"
                                            value="{{ filter_value.value }}"
                                            {% if filter_value.active %}
                                              checked
                                            {% endif %}
                                          >

                                          <label
                                            for="{{ filter_value.param_name }}-{{ filter_value.value }}"
                                            class="color-swatch__item {% if filter_value.active %}is-selected{% endif %}"
                                            aria-label="{{ filter_value.label | escape }}"
                                          >
                                            <span
                                              class="color-swatch__item"
                                              style="{% render 'color-swatch-style', color_swatch_config: color_swatch_config, value: downcased_value %}"
                                            ></span>
                                          </label>
                                        </div>
                                      {%- endfor -%}
                                    </div>
                                  </div>
                                {%- else -%}
                                  <ul class="collection__filter-checkbox-list" role="list">
                                    {%- for filter_value in filter.values -%}
                                      <li class="collection__filter-checkbox">
                                        <div class="checkbox-wrapper">
                                          <input
                                            type="checkbox"
                                            class="checkbox"
                                            id="{{ filter_value.param_name }}-{{ filter_value.value }}"
                                            name="{{ filter.param_name }}"
                                            value="{{ filter_value.value }}"
                                            {% if filter_value.active %}
                                              checked="checked"
                                            {% endif %}
                                          >
                                          {% render 'icon', icon: 'check' %}
                                        </div>

                                        <label for="{{ filter_value.param_name }}-{{ filter_value.value }}">
                                          {{- filter_value.label }}
                                          {% if section.settings.quick_links_show_products_count -%}
                                            ({{ filter_value.count }})
                                          {%- endif -%}
                                        </label>
                                      </li>
                                    {%- endfor -%}
                                  </ul>
                                {%- endif -%}

                              {%- when 'price_range' -%}
                                <price-range class="price-range">
                                  {%- assign min_value = filter.min_value.value | default: 0.0 | divided_by: 100.0 -%}
                                  {%- assign max_value = filter.max_value.value
                                    | default: filter.range_max
                                    | divided_by: 100.0
                                  -%}
                                  {%- assign range_max = filter.range_max | divided_by: 100.0 | ceil -%}

                                  {% assign lower_bound_progress = min_value | divided_by: range_max | times: 100.0 %}
                                  {% assign higher_bound_progress = max_value | divided_by: range_max | times: 100.0 %}

                                  <div
                                    class="price-range__range-group range-group"
                                    style="--range-min: {{ lower_bound_progress }}%; --range-max: {{ higher_bound_progress }}%"
                                  >
                                    <input
                                      type="range"
                                      aria-label="{{ 'collection.filter.price_filter_from' | t }}"
                                      class="range"
                                      min="0"
                                      max="{{ range_max | ceil }}"
                                      value="{{ min_value | ceil }}"
                                    >
                                    <input
                                      type="range"
                                      aria-label="{{ 'collection.filter.price_filter_to' | t }}"
                                      class="range"
                                      min="0"
                                      max="{{ range_max | ceil }}"
                                      value="{{ max_value | ceil }}"
                                    >
                                  </div>

                                  <div class="price-range__input-group">
                                    <div class="price-range__input input-prefix">
                                      <span class="input-prefix__value">{{ cart.currency.symbol }}</span>
                                      <input
                                        aria-label="{{ 'collection.filter.price_filter_from' | t }}"
                                        class="input-prefix__field"
                                        type="number"
                                        inputmode="numeric"
                                        {% if filter.min_value.value %}
                                          value="{{ min_value | ceil }}"
                                        {% endif %}
                                        name="{{ filter.min_value.param_name }}"
                                        min="0"
                                        max="{{ max_value | ceil }}"
                                        placeholder="0"
                                      >
                                    </div>

                                    <span class="price-range__delimiter text--small">-</span>

                                    <div class="price-range__input input-prefix">
                                      <span class="input-prefix__value">{{ cart.currency.symbol }}</span>
                                      <input
                                        aria-label="{{ 'collection.filter.price_filter_to' | t }}"
                                        class="input-prefix__field"
                                        type="number"
                                        inputmode="numeric"
                                        {% if filter.max_value.value %}
                                          value="{{ max_value | ceil }}"
                                        {% endif %}
                                        name="{{ filter.max_value.param_name }}"
                                        min="{{ min_value | ceil }}"
                                        max="{{ range_max | ceil }}"
                                        placeholder="{{ range_max | ceil }}"
                                      >
                                    </div>
                                  </div>
                                </price-range>
                            {%- endcase -%}
                          </div>
                        {%- endunless -%}
                      </div>
                    {%- endfor -%}
                  </div>

                  <noscript>
                    <button type="submit" class="button button--secondary button--full" style="margin-top: 10px">
                      {{ 'collection.filter.view_results' | t }}
                    </button>
                  </noscript>
                </form>
              {%- endif -%}
            </div>
          </div>
        {% else %}
          {%- if section.settings.show_filters and collection.filters != empty -%}
            <form id="desktop-filters-form" class="card__section card__section--tight customForm">
              <input type="hidden" name="sort_by" value="{{ sort_by }}">
              {%- if collection.current_type != blank or collection.current_vendor != blank -%}
                <input
                  type="hidden"
                  name="q"
                  value="{{ collection.current_vendor | default: collection.current_type | escape }}"
                >
              {%- endif -%}
              <div class="mobile-filter-btn">
                <button id="openMobileFilterBtn2" type="button" class="filter-button">
                  <img
                    style="height: 20px; width: 20px;"
                    src="https://cdn.shopify.com/s/files/1/0779/7686/3066/files/page_info.svg?v=1748611226"

                  ><span style="line-height: 100%;">Filter</span>
                </button>
                <div class="filter-modal2">
                  <div class="filter-modal-header" style="display: flex ; align-items: center; gap: 11px;">
                    <div
                      id="closeMobileFilterBtn2"
                      style="display: flex ; align-items: center; gap: 9px; }"
                      class="filter-modal-close-btn"
                    >
                      <div style="height: 28px; width: 28px; border-radius: 50%; padding: 7px; background: #715AEF;">
                        <img
                          style="height 13px; width: 13px;"
                          src="https://cdn.shopify.com/s/files/1/0779/7686/3066/files/arrow_back_1.svg?v=1748616366"
                        >
                      </div>
                      <span style="font-size: 15px; font-weight: 400;">Terug</span>
                    </div>
                    <div class="reset-apply-btn" type="button" style="display: flex ; gap: 11px; align-items: center;">
                      <button
                        class="reset-btn reset-filters-btn"
                        type="button"
                        style="background: #715AEF; padding: 10px; border-radius: 8px; color: white; display: flex ; align-items: center; gap: 10px; line-height: 100%;"
                      >
                        <img
                          style="height: 16px; width: 16px;"
                          src="https://cdn.shopify.com/s/files/1/0779/7686/3066/files/autorenew.svg?v=1748616532"
                        >
                        <span>Reset</span>
                      </button>
                      <button
                        class="apply-btn"
                        type="button"
                        id="applyHeaderBtn"
                        style="background: #EC40A4; border-radius: 8px; padding: 10px; display: flex ; align-items: center; gap: 10px; color: white; line-height: 100%;"
                      >
                        <img
                          style="height: 16px; width: 16px;"
                          src="https://cdn.shopify.com/s/files/1/0779/7686/3066/files/page_info_1.svg?v=1748617845"
                        >
                        <span>Apply</span>
                      </button>
                    </div>
                  </div>
                  <div class="filters-block-main">
                    <div class="price-filter-wrapper 12345678">
                      {% for block in section.blocks %}
                        {% if block.settings.price_title == 'Price' %}
                          <div class="price-title">{{ block.settings.price_title }}</div>
                        {% endif %}
                        {% assign ranges = block.settings.filters_price | split: ',' %}
                        <div class="price-buttons">
                          {% for range in ranges %}
                            {% assign parts = range | split: '-' %}
                            {% assign min = parts[0] | strip %}
                            {% assign max = parts[1] | strip %}
                            {% assign index = forloop.index0 %}
                            <div class="price-filter-btn-mainwrapper {% if index > 3 %}hidden-price{% endif %}">
                              <div class="price-icon-holder">
                                <img src="https://cdn.shopify.com/s/files/1/0779/7686/3066/files/check.svg?v=1749640887">
                              </div>
                              <button class="price-filter-btn" type="button" data-min="{{ min }}" data-max="{{ max }}">
                                From {{ cart.currency.symbol -}}
                                {{- min }} to {{ cart.currency.symbol -}}
                                {{- max }}
                              </button>
                            </div>
                            {% if forloop.last %}
                              {% if block.settings.price_title == 'Price' %}
                                <div class="price-filter-btn-mainwrapper hidden-price forCustomCss ">
                                  <div class="price-icon-holder">
                                    <img src="https://cdn.shopify.com/s/files/1/0779/7686/3066/files/check.svg?v=1749640887">
                                  </div>
                                  <div
                                    class="price-filter-btn price-filter-btn-customs"
                                    data-min="0"
                                    data-max="1000"
                                  ></div>

                                  <div class="priceinputholder">
                                    <span class="forfullwidthSpan form__input-wrapper form__input-wrapper--labelled">
                                      {{- block.settings.filters_price_text -}}
                                    </span>
                                    {% for filter in collection.filters %}
                                      {% if filter.type == 'price_range' %}
                                        <price-range class="price-range ForDisplayNone">
                                          {%- assign min_value = filter.min_value.value
                                            | default: 0.0
                                            | divided_by: 100.0
                                          -%}
                                          {%- assign max_value = filter.max_value.value
                                            | default: filter.range_max
                                            | divided_by: 100.0
                                          -%}
                                          {%- assign range_max = filter.range_max | divided_by: 100.0 | ceil -%}

                                          {% assign lower_bound_progress = min_value
                                            | divided_by: range_max
                                            | times: 100.0
                                          %}
                                          {% assign higher_bound_progress = max_value
                                            | divided_by: range_max
                                            | times: 100.0
                                          %}

                                          <div
                                            class="price-range__range-group range-group"
                                            style="--range-min: {{ lower_bound_progress }}%; --range-max: {{ higher_bound_progress }}%"
                                          >
                                            <input
                                              type="range"
                                              aria-label="{{ 'collection.filter.price_filter_from' | t }}"
                                              class="range"
                                              min="0"
                                              max="{{ range_max | ceil }}"
                                              value="{{ min_value | ceil }}"
                                            >
                                            <input
                                              type="range"
                                              aria-label="{{ 'collection.filter.price_filter_to' | t }}"
                                              class="range"
                                              min="0"
                                              max="{{ range_max | ceil }}"
                                              value="{{ max_value | ceil }}"
                                            >
                                          </div>
                                          <div class="price-range__input-group">
                                            <div class="price-range__input input-prefix">
                                              <span class="input-prefix__value">{{ cart.currency.symbol }}</span>
                                              <input
                                                id="disabledrangeminMob"
                                                aria-label="{{ 'collection.filter.price_filter_from' | t }}"
                                                class="input-prefix__field"
                                                type="number"
                                                disabled="disabled"
                                                inputmode="numeric"
                                                {% if filter.min_value.value %}
                                                  value="{{ min_value | ceil }}"
                                                {% endif %}
                                                name="{{ filter.min_value.param_name }}"
                                                min="0"
                                                max="{{ max_value | ceil }}"
                                                placeholder="0"
                                              >
                                            </div>

                                            <span class="price-range__delimiter text--small">-</span>

                                            <div class="price-range__input input-prefix">
                                              <span class="input-prefix__value">{{ cart.currency.symbol }}</span>
                                              <input
                                                aria-label="{{ 'collection.filter.price_filter_to' | t }}"
                                                class="input-prefix__field"
                                                type="number"
                                                id="disabledrangemaxMob"
                                                disabled="disabled"
                                                inputmode="numeric"
                                                {% if filter.max_value.value %}
                                                  value="{{ max_value | ceil }}"
                                                {% endif %}
                                                name="{{ filter.max_value.param_name }}"
                                                min="{{ min_value | ceil }}"
                                                max="{{ range_max | ceil }}"
                                                placeholder="{{ range_max | ceil }}"
                                              >
                                            </div>
                                          </div>
                                        </price-range>
                                      {% endif %}
                                    {% endfor %}
                                  </div>
                                </div>
                              {% endif %}
                            {% endif %}
                          {% endfor %}
                        </div>
                        {% if ranges.size > 4 %}
                          <div class="price-toggle-buttons">
                            <button
                              id="showMorePrices"
                              type="button"
                              class="showMorePrices"
                              style="text-decoration: underline; margin-top: 10px; color: #e6007e; background: none; border: none; cursor: pointer;"
                            >
                              Show more
                            </button>
                            <button
                              id="showLessPrices"
                              type="button"
                              class="showLessPrices"
                              style="display: none; text-decoration: underline; margin-top: 10px; color: #e6007e; background: none; border: none; cursor: pointer;"
                            >
                              Show less
                            </button>
                          </div>
                        {% endif %}
                      {% endfor %}
                    </div>
                    <div class="color-filter-wrapper" style="width: 277px; padding-bottom: 32px; padding-top: 32px;">
                      {% for block in section.blocks %}
                        {% assign color_labels = block.settings.filters_text_2 | split: ',' %}
                        {% assign color_images = block.settings.filters_image_2 | newline_to_br | split: '<br />' %}
                        <div class="color-filter-block">
                          <div
                            class="color-filter-title"
                            style="font-size: 18px; font-weight: 700; color: black; line-height: 100%; margin-bottom: 16px;"
                          >
                            {{ block.settings.filter_title_2 }}
                          </div>
                          <div class="color-filter-list">
                            {% assign optionname = block.settings.optionName | downcase %}
                            {% assign multi_colors_string = '' %}
                            {% assign single_colors_string = '' %}

                            {% if block.type == 'filter_block' %}
                              {% for filter in collection.filters %}
                                {% assign filter_name = filter.label | downcase %}
                                {% if filter_name == optionname %}
                                  {% for value in filter.values %}
                                    {% if value.label contains '+' %}
                                      {% if multi_colors_string == '' %}
                                        {% assign multi_colors_string = value.label %}
                                      {% else %}
                                        {% assign multi_colors_string = multi_colors_string
                                          | append: ','
                                          | append: value.label
                                        %}
                                      {% endif %}
                                    {% else %}
                                      {% if single_colors_string == '' %}
                                        {% assign single_colors_string = value.label %}
                                      {% else %}
                                        {% assign single_colors_string = single_colors_string
                                          | append: ','
                                          | append: value.label
                                        %}
                                      {% endif %}
                                    {% endif %}
                                  {% endfor %}
                                {% endif %}
                              {% endfor %}
                            {% endif %}
                            {% for label in color_labels %}
                              {% assign img_index = forloop.index0 %}
                              {% assign img_url = color_images[img_index] | strip %}
                              <button
                                type="button"
                                class="color-filter-item color-filter-btn"
                                data-filter-color="{% if label == color_labels[0] %} {{ single_colors_string }} {%else %} {{ multi_colors_string }} {% endif %}"
                              >
                                <span
                                  class="color-filter-swatch"
                                  style="background-image: url('{{ img_url }}');"
                                ></span>
                                <span class="color-filter-label">{{ label | strip }}</span>
                              </button>
                            {% endfor %}
                          </div>
                        </div>
                      {% endfor %}
                    </div>
                    <div
                      class="sidebar-menu"
                      style="width: 277px; padding: 32px 0;border-top: 1px solid rgba(247, 245, 255, 1);"
                    >
                      {% for block in section.blocks %}
                        {% assign filter_texts = block.settings.filters_text | split: ',' %}
                        {% assign filter_images = block.settings.filters_image | newline_to_br | split: '<br />' %}
                        <div class="filter-block">
                          <div
                            class="block-title"
                            style="font-size: 18px; font-weight: 700; color: black; line-height: 100%; margin-bottom: 16px;"
                          >
                            {{ block.settings.title }}
                          </div>
                          <div class="blocktype-filter" style="display: grid ; grid-gap: 8px;">
                            {% for text in filter_texts %}
                              {% assign image_index = forloop.index0 %}
                              {% assign image_url = filter_images[image_index] | strip %}
                              <button
                                type="button"
                                class="filter-btn  Button_filter"
                                data-filter="{{ text | strip | downcase }}"
                              >
                                <div class="filter-img">
                                  <img
                                    style="width: 90px; height: 64px; object-fit: cover; border-radius: 8px 0 0 8px;"
                                    src="{{ image_url }}"
                                  >
                                </div>
                                <span class="filter-label">{{ text | strip }}</span>
                              </button>
                            {% endfor %}
                          </div>
                        </div>
                      {% endfor %}
                    </div>
                  </div>
                  <div
                    class="reset-apply-btn"
                    type="button"
                    style="display: grid; grid-gap: 11px; align-items: center; padding: 25px 0 52px 0;"
                  >
                    <button
                      type="button"
                      type="button"
                      class="apply-btn"
                      id="applyFilterBtn"
                      style="justify-content: center; background: #EC40A4; border-radius: 8px; padding: 10px; display: flex ; align-items: center; gap: 10px; color: white; line-height: 100%;"
                    >
                      <img
                        style="height: 16px; width: 16px;"
                        src="https://cdn.shopify.com/s/files/1/0779/7686/3066/files/page_info_1.svg?v=1748617845"
                      >
                      <span>Apply Filter</span>
                    </button>
                    <button
                      type="button"
                      type="button"
                      class="reset-btn reset-filters-btn"
                      style="justify-content: center; background: #715AEF; padding: 10px; border-radius: 8px; color: white; display: flex ; align-items: center; gap: 10px; line-height: 100%;"
                    >
                      <img
                        style="height: 16px; width: 16px;"
                        src="https://cdn.shopify.com/s/files/1/0779/7686/3066/files/autorenew.svg?v=1748616532"
                      >
                      <span>Reset</span>
                    </button>
                  </div>
                </div>
              </div>
              {% comment %}
                {%for filter in collection.filters  %}
                  {{filter.type }}
                  {{filter.lable }}
                {% endfor %}
              {% endcomment %}
              <div class="filters-block-main">
                <div class="price-filter-wrapper">
                  {% for block in section.blocks %}
                    {% if block.settings.price_title == 'Price' %}
                      <input
                        class="PriceStartFilter"
                        style="display:none;"
                        type="number"
                        value=""
                        inputmode="numeric"
                        name="filter.v.price.gte"
                      >
                      <input
                        class="PriceEndFilter"
                        style="display:none;"
                        type="number"
                        value=""
                        inputmode="numeric"
                        name="filter.v.price.lte"
                      >
                      <div class="price-title">{{ block.settings.price_title }}</div>
                    {% endif %}
                    {% assign ranges = block.settings.filters_price | split: ',' %}
                    <div class="price-buttons">
                      {% for range in ranges %}
                        {% assign parts = range | split: '-' %}
                        {% assign min = parts[0] | strip %}
                        {% assign max = parts[1] | strip %}
                        {% assign index = forloop.index0 %}
                        <div class="price-filter-btn-mainwrapper {% if index > 3 %}hidden-price{% endif %}">
                          <div class="price-icon-holder">
                            <img src="https://cdn.shopify.com/s/files/1/0779/7686/3066/files/check.svg?v=1749640887">
                          </div>
                          <button type="button" class="price-filter-btn" data-min="{{ min }}" data-max="{{ max }}">
                            From {{ cart.currency.symbol -}}
                            {{- min }} to {{ cart.currency.symbol -}}
                            {{- max }}
                          </button>
                        </div>
                        {% if forloop.last %}
                          {% if block.settings.price_title == 'Price' %}
                            <div class="price-filter-btn-mainwrapper hidden-price forCustomCss">
                              <div class="price-icon-holder">
                                <img src="https://cdn.shopify.com/s/files/1/0779/7686/3066/files/check.svg?v=1749640887">
                              </div>
                              <div class="price-filter-btn price-filter-btn-customs" data-min="0" data-max="1000"></div>

                              <div class="priceinputholder">
                                <span class="forfullwidthSpan form__input-wrapper form__input-wrapper--labelled">
                                  {{- block.settings.filters_price_text -}}
                                </span>
                                {% for filter in collection.filters %}
                                  {% if filter.type == 'price_range' %}
                                    <price-range class="price-range ForDisplayNone">
                                      {%- assign min_value = filter.min_value.value
                                        | default: 0.0
                                        | divided_by: 100.0
                                      -%}
                                      {%- assign max_value = filter.max_value.value
                                        | default: filter.range_max
                                        | divided_by: 100.0
                                      -%}
                                      {%- assign range_max = filter.range_max | divided_by: 100.0 | ceil -%}

                                      {% assign lower_bound_progress = min_value
                                        | divided_by: range_max
                                        | times: 100.0
                                      %}
                                      {% assign higher_bound_progress = max_value
                                        | divided_by: range_max
                                        | times: 100.0
                                      %}

                                      <div
                                        class="price-range__range-group range-group"
                                        style="--range-min: {{ lower_bound_progress }}%; --range-max: {{ higher_bound_progress }}%"
                                      >
                                        <input
                                          type="range"
                                          aria-label="{{ 'collection.filter.price_filter_from' | t }}"
                                          class="range"
                                          min="0"
                                          max="{{ range_max | ceil }}"
                                          value="{{ min_value | ceil }}"
                                        >
                                        <input
                                          type="range"
                                          aria-label="{{ 'collection.filter.price_filter_to' | t }}"
                                          class="range"
                                          min="0"
                                          max="{{ range_max | ceil }}"
                                          value="{{ max_value | ceil }}"
                                        >
                                      </div>
                                      <div class="price-range__input-group">
                                        <div class="price-range__input input-prefix">
                                          <span class="input-prefix__value">{{ cart.currency.symbol }}</span>
                                          <input
                                            id="disabledrangeminDesk"
                                            aria-label="{{ 'collection.filter.price_filter_from' | t }}"
                                            class="input-prefix__field"
                                            type="number"
                                            disabled="disabled"
                                            inputmode="numeric"
                                            {% if filter.min_value.value %}
                                              value="{{ min_value | ceil }}"
                                            {% endif %}
                                            name="{{ filter.min_value.param_name }}"
                                            min="0"
                                            max="{{ max_value | ceil }}"
                                            placeholder="0"
                                          >
                                        </div>

                                        <span class="price-range__delimiter text--small">-</span>

                                        <div class="price-range__input input-prefix">
                                          <span class="input-prefix__value">{{ cart.currency.symbol }}</span>
                                          <input
                                            aria-label="{{ 'collection.filter.price_filter_to' | t }}"
                                            class="input-prefix__field"
                                            type="number"
                                            id="disabledrangemaxDesk"
                                            disabled="disabled"
                                            inputmode="numeric"
                                            {% if filter.max_value.value %}
                                              value="{{ max_value | ceil }}"
                                            {% endif %}
                                            name="{{ filter.max_value.param_name }}"
                                            min="{{ min_value | ceil }}"
                                            max="{{ range_max | ceil }}"
                                            placeholder="{{ range_max | ceil }}"
                                          >
                                        </div>
                                      </div>
                                    </price-range>
                                  {% endif %}
                                {% endfor %}
                              </div>
                            </div>
                          {% endif %}
                        {% endif %}
                      {% endfor %}
                    </div>
                    {% if ranges.size > 4 %}
                      <div class="price-toggle-buttons">
                        <button
                          id="showMorePrices"
                          type="button"
                          class="showMorePrices"
                          style="text-decoration: underline; margin-top: 10px; color: #e6007e; background: none; border: none; cursor: pointer;"
                        >
                          Show more
                        </button>
                        <button
                          id="showLessPrices"
                          type="button"
                          class="showLessPrices"
                          style="display: none; text-decoration: underline; margin-top: 10px; color: #e6007e; background: none; border: none; cursor: pointer;"
                        >
                          Show less
                        </button>
                      </div>
                    {% endif %}
                  {% endfor %}
                </div>
                <div class="color-filter-wrapper" style="width: 277px; padding-bottom: 32px; padding-top: 32px;">
                  {%- assign color_labels = 'color,colour,couleur,cor,colore,kleur,farbe,색,色,カラー,färg,farve,szín,barva'
                    | split: ','
                  -%} 
                  {% assign has_color_filter = false %}
                  {% assign color_filter_label = '' %}

                  {% for filter in collection.filters %}
                    {% assign filter_label_downcased = filter.label | downcase %}
                    {% if color_labels contains filter_label_downcased %}
                      {% assign has_color_filter = true %}
                      {% assign color_filter_label = filter.label %}
                      {% break %}
                    {% endif %}
                  {% endfor %}

                  {% if has_color_filter %}
                    <input
                      id="ColorFilterOptionDynamic"
                      style="display:none;"
                      hidden
                      type="text"
                      name="ColorFilterOptionDynamic"
                      value="filter.v.option.{{color_filter_label | downcase }}"
                    >
                    <input
                      class="ColorFilter"
                      style="display:none;"
                      type="text"
                      name="filter.v.option.{{color_filter_label | downcase }}"
                      value=""
                    >
                    
                {% endif %}


                  {% for block in section.blocks %}
                    {% assign color_labels = block.settings.filters_text_2 | split: ',' %}
                    {% assign color_images = block.settings.filters_image_2 | newline_to_br | split: '<br />' %}
                    <div class="color-filter-block">
                      <div
                        class="color-filter-title"
                        style="font-size: 18px; font-weight: 700; color: black; line-height: 100%; margin-bottom: 16px;"
                      >
                        {{ block.settings.filter_title_2 }}
                      </div>
                      <div class="color-filter-list">
                        {% assign optionname = block.settings.optionName | downcase %}
                        {% assign multi_colors_string = '' %}
                        {% assign single_colors_string = '' %}
                        {% if block.type == 'filter_block' %}
                          {% for filter in collection.filters %}
                            {% assign filter_name = filter.label | downcase %}
                            {% if filter_name == optionname %}
                              {% for value in filter.values %}
                                {% if value.label contains '+' %}
                                  {% if multi_colors_string == '' %}
                                    {% assign multi_colors_string = value.label %}
                                  {% else %}
                                    {% assign multi_colors_string = multi_colors_string
                                      | append: ','
                                      | append: value.label
                                    %}
                                  {% endif %}
                                {% else %}
                                  {% if single_colors_string == '' %}
                                    {% assign single_colors_string = value.label %}
                                  {% else %}
                                    {% assign single_colors_string = single_colors_string
                                      | append: ','
                                      | append: value.label
                                    %}
                                  {% endif %}
                                {% endif %}
                              {% endfor %}
                            {% endif %}
                          {% endfor %}
                        {% endif %}
                        {% for label in color_labels %}
                          {% assign img_index = forloop.index0 %}
                          {% assign img_url = color_images[img_index] | strip %}
                          <button
                            type="button"
                            class="color-filter-item color-filter-btn"
                            data-filter-color="{% if label == color_labels[0] %} {{ single_colors_string }} {%else %} {{ multi_colors_string }} {% endif %}"
                          >
                            <span class="color-filter-swatch" style="background-image: url('{{ img_url }}');"></span>
                            <span class="color-filter-label">{{ label | strip }}</span>
                          </button>
                        {% endfor %}
                      </div>
                    </div>
                  {% endfor %}
                </div>
                <div
                  class="sidebar-menu"
                  style="width: 277px; padding: 32px 0; border-top: 1px solid rgba(247, 245, 255, 1);"
                >
                  <input
                    class="MetaFilter"
                    style="display:none;"
                    type="text"
                    name="filter.p.m.custom.product_type"
                    value=""
                  >

                  {% for block in section.blocks %}
                    {% assign filter_texts = block.settings.filters_text | split: ',' %}
                    {% assign filter_images = block.settings.filters_image | newline_to_br | split: '<br />' %}

                    <div class="filter-block">
                      <div
                        class="block-title"
                        style="font-size: 18px; font-weight: 700; color: black; line-height: 100%; margin-bottom: 16px;"
                      >
                        {{ block.settings.title }}
                      </div>
                      <div class="blocktype-filter" style="display: grid ; grid-gap: 8px;">
                        {% for text in filter_texts %}
                          {% assign image_index = forloop.index0 %}
                          {% assign image_url = filter_images[image_index] | strip %}
                          <button
                            type="button"
                            class="filter-btn Button_filter"
                            data-filter="{{ text | strip | downcase }}"
                          >
                            <div class="filter-img">
                              <img
                                style="width: 90px; height: 64px; object-fit: cover; border-radius: 8px 0 0 8px;"
                                src="{{ image_url }}"
                              >
                            </div>
                            <span class="filter-label">{{ text | strip }}</span>
                          </button>
                        {% endfor %}
                      </div>
                    </div>
                  {% endfor %}
                </div>
              </div>
            </form>
          {%- endif -%}
        {% endif %}
      {%- endif -%}
      {%- paginate collection.products by items_per_page -%}
        <div
          {% if has_filters %}
            class="layout__section"
          {% endif %}
        >
          <div class="collection">
            {%- unless collection.template_suffix == 'brand' -%}
              {%- if section.settings.show_collection_image
                and collection.image
                and collection.all_products_count > 0
              -%}
                {%- if section.settings.collection_image_size == 'preserve_ratio' -%}
                  <div class="collection__image-wrapper collection__image-wrapper--preserve-ratio">
                    {{-
                      collection.image
                      | image_url: width: collection.image.width
                      | image_tag:
                        loading: 'lazy',
                        sizes: 'min(100vw, 1000px)',
                        widths: '200,300,400,500,600,800,1000,1200,1400,1600'
                    -}}
                  </div>
                {%- else -%}
                  <div class="collection__image-wrapper collection__image-wrapper--{{ section.settings.collection_image_size }}">
                    {{-
                      collection.image
                      | image_url: width: collection.image.width
                      | image_tag:
                        loading: 'lazy',
                        sizes: 'min(100vw, 1000px)',
                        widths: '200,300,400,500,600,800,1000,1200,1400,1600',
                        class: 'image-background'
                    -}}
                  </div>
                {%- endif -%}
              {%- endif -%}
            {%- endunless -%}
            {%- if collection.all_products_count == 0 -%}
              <div class="empty-state">
                <p class="empty-state__heading heading h1">{{ collection.title }}</p>
                <p class="empty-state__description">{{ 'collection.general.empty' | t }}</p>

                <div class="empty-state__button-container">
                  <a href="{{ routes.root_url }}" class="empty-state__button button button--primary">
                    {{- 'collection.general.empty_button' | t -}}
                  </a>
                </div>
              </div>
            {%- else -%}
              <div class="card {% if collection.products_count == 0 %}clearfix{% endif %}">
                {% if template.suffix != 'updated_collection' %}
                  <header class="card__header {% unless collection.template_suffix == 'brand' %}card__header--tight{% endunless %}">
                    <div class="collection__header {% if collection.template_suffix == 'brand' %}collection__header--brand{% endif %}">
                      {%- if section.settings.show_collection_image
                        and collection.image
                        and collection.all_products_count > 0
                        and collection.template_suffix == 'brand'
                      -%}
                        <div class="collection__brand-logo-wrapper hidden-pocket">
                          <div class="collection__brand-logo-image">
                            {{-
                              collection.image
                              | image_url: width: collection.image.width
                              | image_tag: loading: 'lazy', sizes: '250px', widths: '250,500'
                            -}}
                          </div>
                        </div>
                      {%- endif -%}

                      <div class="collection__header-inner">
                        <div class="collection__meta">
                          {%- if section.settings.show_collection_image
                            and collection.image
                            and collection.all_products_count > 0
                            and collection.template_suffix == 'brand'
                          -%}
                            <div class="collection__brand-logo-wrapper hidden-lap-and-up">
                              <div class="collection__brand-logo-image">
                                {{-
                                  collection.image
                                  | image_url: width: collection.image.width
                                  | image_tag: loading: 'lazy', sizes: '250px', widths: '250,500'
                                -}}
                              </div>
                            </div>
                          {%- endif -%}

                          <div class="collection__meta-inner">
                            <h1 class="collection__title heading h1">
                              {%- if collection.handle == 'all' -%}
                                {{- 'collection.general.all_products' | t -}}
                              {%- else -%}
                                {{- collection.title -}}
                              {%- endif -%}
                            </h1>

                            {%- assign offset = paginate.current_offset | plus: 1 -%}
                            {%- assign page_size = paginate.current_offset
                              | plus: paginate.page_size
                              | at_most: paginate.items
                            -%}

                            <p class="collection__products-count collection__products-count-total text--small hidden-lap-and-up">
                              {{ 'collection.general.products_count' | t: count: collection.products_count }}
                            </p>
                            <p class="collection__products-count collection__products-count-showing text--small hidden-pocket hidden-desk">
                              {{
                                'collection.general.showing_count'
                                | t: offset: offset, page_size: page_size, count: paginate.items
                              }}
                            </p>
                          </div>
                        </div>

                        <!--
                          { %- if collection.description != blank -%}
                              { %- assign allow_collapse_description = false -%}

                              { %- if section.settings.collapse_collection_description -%}
                              { %- assign allow_collapse_description = true -%}
                              { %- endif -%}

                              <div class="collection__description { % if allow_collapse_description %}expandable-content{ % endif %}" aria-expanded="false">
                              <div class="rte">
                                  { { collection.description } }
                              </div>

                              { %- if allow_collapse_description -%}
                                  <button class="expandable-content__toggle">
                                  <span class="expandable-content__toggle-icon"></span>
                                  <span class="expandable-content__toggle-text" data-view-more="{ { 'collection.general.view_more' | t | escape }}" data-view-less="{ { 'collection.general.view_less' | t | escape }}">{ {- 'collection.general.view_more' | t -}}</span>
                                  </button>
                              { %- endif -%}
                              </div>
                          { %- endif -%}
                        -->
                      </div>
                    </div>
                  </header>
                {% endif %}
                <p
                  style="display:none !important;"
                  class="collection__products-count collection__products-count-total text--small hidden-lap-and-up"
                >
                  {{ 'collection.general.products_count' | t: count: collection.products_count }}
                </p>

                <div class="collection__dynamic-part">
                  <div class="collection__toolbar collection__toolbar--bordered">
                    {% if template.suffix != 'updated_collection' %}
                      {%- if has_filters -%}
                        <button
                          class="collection__toolbar-item collection__toolbar-item--filter hidden-lap-and-up"
                          data-action="open-drawer"
                          aria-haspopup="true"
                          aria-expanded="false"
                          aria-controls="mobile-collection-filters"
                        >
                          <span class="collection__filter-icon {% if active_filters_count > 0 %}collection__filter-icon--active{% endif %}">
                            {%- render 'icon', icon: 'filter' -%}
                          </span>
                          {{ 'collection.filter.title' | t -}}
                          {%- if active_filters_count > 0 %}&nbsp;({{ active_filters_count }}){% endif %}
                        </button>
                      {%- endif -%}
                    {%- endif -%}

                    <div class="collection__toolbar-item collection__toolbar-item--count hidden-pocket">
                      {%- assign offset = paginate.current_offset | plus: 1 -%}
                      {%- assign page_size = paginate.current_offset
                        | plus: paginate.page_size
                        | at_most: paginate.items
                      -%}
                      {% if template.suffix == 'updated_collection' %}
                        <span id="product_count" class="collection__showing-count hidden-pocket hidden-lap">
                          {{ paginate.items }}
                          {{ section.settings.ProductCountText }}
                        </span>
                      {% else %}
                        <span class="collection__showing-count hidden-pocket hidden-lap">
                          {{-
                            'collection.general.showing_count'
                            | t: offset: offset, page_size: page_size, count: paginate.items
                          -}}
                        </span>
                      {% endif %}
                      {% if template.suffix != 'updated_collection' %}
                        <div class="value-picker-wrapper">
                          <button
                            class="value-picker-button"
                            aria-haspopup="true"
                            aria-expanded="false"
                            aria-controls="display-by-selector"
                            data-action="open-value-picker"
                          >
                            <span class="hidden-phone">
                              {{- 'collection.general.display' | t }}:
                              {{ 'collection.general.page_size' | t: page_size: paginate.page_size -}}
                            </span>
                            <!--  -->
                            {%- render 'icon', icon: 'arrow-bottom' -%}
                          </button>
                          <div id="display-by-selector" class="value-picker" aria-hidden="true">
                            {% render 'icon', icon: 'nav-triangle-borderless' %}
                            <div class="value-picker__inner">
                              <header class="value-picker__header">
                                <span class="value-picker__title text--strong">
                                  {{- 'collection.general.display' | t -}}
                                </span>
                                <button
                                  class="value-picker__close"
                                  data-action="close-value-picker"
                                  aria-controls="display-by-selector"
                                  aria-label="{{ 'general.accessibility.close' | t }}"
                                >
                                  {% render 'icon', icon: 'close' %}
                                </button>
                              </header>
                              <div class="value-picker__choice-list">
                                <button
                                  class="value-picker__choice-item link {% if items_per_page == 12 %}is-selected{% endif %}"
                                  data-action="select-value"
                                  data-value="12"
                                >
                                  {{ 'collection.general.page_size' | t: page_size: 12 }}
                                  {% render 'icon', icon: 'check-2' %}
                                </button>
                                <button
                                  class="value-picker__choice-item link {% if items_per_page == 24 %}is-selected{% endif %}"
                                  data-action="select-value"
                                  data-value="24"
                                >
                                  {{ 'collection.general.page_size' | t: page_size: 24 }}
                                  {% render 'icon', icon: 'check-2' %}
                                </button>
                                <button
                                  class="value-picker__choice-item link {% if items_per_page == 36 %}is-selected{% endif %}"
                                  data-action="select-value"
                                  data-value="36"
                                >
                                  {{ 'collection.general.page_size' | t: page_size: 36 }}
                                  {% render 'icon', icon: 'check-2' %}
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      {% endif %}
                    </div>
                    <div class="{%  if template.suffix == 'updated_collection' %}updated-collection{% endif %}">
                      {% if template.suffix == 'updated_collection' %}
                        <div class="value-picker-wrapper">
                          <button
                            class="value-picker-button updated-sort-button"
                            aria-haspopup="true"
                            aria-expanded="false"
                            aria-controls="display-by-selector"
                            data-action="open-value-picker"
                          >
                            <span class="custom-sort-icon"
                              ><img src="https://cdn.shopify.com/s/files/1/0779/7686/3066/files/perpagedown.svg?v=1749033856"
                            ></span>
                            {{ paginate.page_size }} per page
                          </button>
                          <div id="display-by-selector" class="value-picker" aria-hidden="true">
                            {% render 'icon', icon: 'nav-triangle-borderless' %}
                            <div class="value-picker__inner">
                              <header class="value-picker__header">
                                <span class="value-picker__title text--strong">Display</span>
                                <button
                                  class="value-picker__close"
                                  data-action="close-value-picker"
                                  aria-controls="display-by-selector"
                                  aria-label="Close"
                                >
                                  {% render 'icon', icon: 'close' %}
                                </button>
                              </header>
                              <div class="value-picker__choice-list">
                                <button
                                  class="value-picker__choice-item link {% if items_per_page == 12 %}is-selected{% endif %}"
                                  data-action="select-value"
                                  data-value="12"
                                >
                                  12 per page {% render 'icon', icon: 'check-2' %}
                                </button>
                                <button
                                  class="value-picker__choice-item link {% if items_per_page == 24 %}is-selected{% endif %}"
                                  data-action="select-value"
                                  data-value="24"
                                >
                                  24 per page {% render 'icon', icon: 'check-2' %}
                                </button>
                                <button
                                  class="value-picker__choice-item link {% if items_per_page == 36 %}is-selected{% endif %}"
                                  data-action="select-value"
                                  data-value="36"
                                >
                                  36 per page {% render 'icon', icon: 'check-2' %}
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      {% endif %}
                      <div class="collection__toolbar-item collection__toolbar-item--sort">
                        {% if template.suffix == 'updated_collection' %}
                          <div class="value-picker-wrapper">
                            <button
                              class="value-picker-button updated-sort-button"
                              aria-haspopup="true"
                              aria-expanded="false"
                              aria-controls="sort-by-selector"
                              data-action="open-value-picker"
                            >
                              <span class="custom-sort-icon"
                                ><img src="https://cdn.shopify.com/s/files/1/0779/7686/3066/files/sort-by-icon.svg?v=1749033318"
                              ></span>
                              Sort by
                            </button>

                            <div id="sort-by-selector" class="value-picker" aria-hidden="true">
                              <div class="value-picker__inner">
                                <header class="value-picker__header">
                                  <span class="value-picker__title text--strong">Sort by</span>
                                  <button
                                    class="value-picker__close"
                                    data-action="close-value-picker"
                                    aria-controls="sort-by-selector"
                                    aria-label="Close"
                                  >
                                    {% render 'icon', icon: 'close' %}
                                  </button>
                                </header>

                                <div class="value-picker__choice-list">
                                  {%- assign collection_sort_by = collection.sort_by
                                    | default: collection.default_sort_by
                                  -%}
                                  {%- for option in collection.sort_options -%}
                                    <button
                                      class="value-picker__choice-item link {% if option.value == collection_sort_by %}is-selected{% endif %}"
                                      data-action="select-value"
                                      data-value="{{ option.value }}"
                                    >
                                      {{ option.name }}
                                      {% render 'icon', icon: 'check-2' %}
                                    </button>
                                  {%- endfor -%}
                                </div>
                              </div>
                            </div>
                          </div>

                        {% else %}
                          {%- assign collection_sort_by = collection.sort_by | default: collection.default_sort_by -%}

                          {%- for option in collection.sort_options -%}
                            {%- if option.value == collection_sort_by -%}
                              {%- assign collection_sort_by_name = option.name -%}
                              {%- break -%}
                            {%- endif -%}
                          {%- endfor -%}

                          <div class="value-picker-wrapper">
                            <button
                              class="value-picker-button"
                              aria-haspopup="true"
                              aria-expanded="false"
                              aria-controls="sort-by-selector"
                              data-action="open-value-picker"
                            >
                              <span class="hidden-tablet-and-up">{{ 'collection.sorting.title' | t }}</span>
                              <span class="hidden-phone">
                                {{- 'collection.sorting.title' | t }}: {{ collection_sort_by_name -}}
                              </span>
                              {%- render 'icon', icon: 'arrow-bottom' -%}
                            </button>

                            <div id="sort-by-selectores" class="value-picker" aria-hidden="true">
                              {% render 'icon', icon: 'nav-triangle-borderless' %}

                              <div class="value-picker__inner">
                                <header class="value-picker__header">
                                  <span class="value-picker__title text--strong">
                                    {{- 'collection.sorting.title' | t -}}
                                  </span>
                                  <button
                                    class="value-picker__close"
                                    data-action="close-value-picker"
                                    aria-controls="sort-by-selector"
                                    aria-label="{{ 'general.accessibility.close' | t }}"
                                  >
                                    {% render 'icon', icon: 'close' %}
                                  </button>
                                </header>

                                <div class="value-picker__choice-list">
                                  {%- for option in collection.sort_options -%}
                                    <button
                                      class="value-picker__choice-item link {% if option.value == collection_sort_by %}is-selected{% endif %}"
                                      data-action="select-value"
                                      data-value="{{ option.value }}"
                                    >
                                      {{ option.name }}
                                      {% render 'icon', icon: 'check-2' %}
                                    </button>
                                  {%- endfor -%}
                                </div>
                              </div>
                            </div>
                          </div>
                        {% endif %}
                      </div>
                    </div>
                    {% if template.suffix != 'updated_collection' %}
                      <div class="collection__toolbar-item collection__toolbar-item--layout">
                        <span class="collection__layout-label hidden-phone">{{ 'collection.layout.title' | t }}</span>

                        {%- if section.settings.default_view_layout == 'grid' -%}
                          <button
                            type="button"
                            class="collection__layout-button {% if view_mode == 'grid' %}is-selected{% endif %} link touch-area"
                            aria-label="{{ 'collection.layout.grid' | t }}"
                            data-action="change-layout"
                            data-layout-mode="grid"
                          >
                            {% render 'icon', icon: 'grid' %}
                          </button>
                          <button
                            type="button"
                            class="collection__layout-button {% if view_mode == 'list' %}is-selected{% endif %} link touch-area"
                            aria-label="{{ 'collection.layout.list' | t }}"
                            data-action="change-layout"
                            data-layout-mode="list"
                          >
                            {% render 'icon', icon: 'list' %}
                          </button>
                        {%- else -%}
                          <button
                            type="button"
                            class="collection__layout-button {% if view_mode == 'list' %}is-selected{% endif %} link touch-area"
                            aria-label="{{ 'collection.layout.list' | t }}"
                            data-action="change-layout"
                            data-layout-mode="list"
                          >
                            {% render 'icon', icon: 'list' %}
                          </button>
                          <button
                            type="button"
                            class="collection__layout-button {% if view_mode == 'grid' %}is-selected{% endif %} link touch-area"
                            aria-label="{{ 'collection.layout.grid' | t }}"
                            data-action="change-layout"
                            data-layout-mode="grid"
                          >
                            {% render 'icon', icon: 'grid' %}
                          </button>
                        {%- endif -%}
                      </div>
                    {% endif %}
                  </div>

                  {%- if has_filters and active_filters_count > 0 -%}
                    <div class="card__section collection__mobile-filters-recap hidden-lap-and-up">
                      <div class="collection__mobile-active-filters">
                        {%- for filter in collection.filters -%}
                          {%- if filter.type == 'list' -%}
                            {%- for active_filter_value in filter.active_values -%}
                              <button
                                class="collection__mobile-active-filter-item"
                                data-action="clear-filters"
                                data-url="{{ active_filter_value.url_to_remove | escape }}"
                              >
                                <span class="collection__mobile-active-filter-cross">
                                  {%- render 'icon', icon: 'close' -%}
                                </span>
                                {{- active_filter_value.label -}}
                              </button>
                            {%- endfor -%}
                          {%- elsif filter.type == 'price_range'
                            and filter.min_value.value
                            or filter.max_value.value
                          -%}
                            <button
                              class="collection__mobile-active-filter-item"
                              data-action="clear-filters"
                              data-url="{{ filter.url_to_remove | escape }}"
                            >
                              <span class="collection__mobile-active-filter-cross">
                                {%- render 'icon', icon: 'close' -%}
                              </span>
                              {{- filter.min_value.value | default: 0 | money_without_trailing_zeros }} -
                              {{ filter.max_value.value | default: filter.range_max | money_without_trailing_zeros -}}
                            </button>
                          {%- elsif filter.type == 'boolean' and filter.true_value.active -%}
                            <button
                              class="collection__mobile-active-filter-item"
                              data-action="clear-filters"
                              data-url="{{ filter.url_to_remove | escape }}"
                            >
                              <span class="collection__mobile-active-filter-cross">
                                {%- render 'icon', icon: 'close' -%}
                              </span>
                              {{- filter.label -}}
                            </button>
                          {%- endif -%}
                        {%- endfor -%}

                        {%- if active_filters_count > 1 -%}
                          <button
                            class="collection__mobile-active-clear"
                            data-action="clear-filters"
                            data-url="{{ collection.url }}?sort_by={{ sort_by }}"
                          >
                            {{ 'collection.filter.clear_all' | t }}
                          </button>
                        {%- endif -%}
                      </div>

                      <span class="collection__mobile-active-filters-results">
                        {{- 'collection.general.results_count' | t: count: collection.products_count -}}
                      </span>
                    </div>
                  {%- endif -%}

                  {%- if collection.products_count == 0 -%}
                    <div class="empty-state empty-state--tight">
                      <p class="empty-state__description">{{ 'collection.general.no_results' | t }}</p>

                      <div class="empty-state__button-container">
                        <button
                          class="empty-state__button button button--primary"
                          data-action="clear-filters"
                          data-url="{{ collection.url }}?sort_by={{ sort_by }}"
                        >
                          {{ 'collection.filter.clear_all' | t }}
                        </button>
                      </div>
                    </div>
                  {%- else -%}
                    {%- if view_mode == 'grid' -%}
                      {%- assign show_as_list = false -%}
                    {%- else -%}
                      {%- assign show_as_list = true -%}
                    {%- endif -%}

                    <div class="product-list product-list--collection {% if has_filters %}product-list--with-sidebar{% endif %}">
                      {%- for product in collection.products -%}
                        {%- render 'product-item',
                          product: product,
                          list: show_as_list,
                          grid_classes: grid_classes,
                          update_collection: IsUpdated
                        -%}
                      {%- endfor -%}
                    </div>

                    {%- render 'pagination', paginate: paginate -%}
                  {%- endif -%}
                  <script type="application/json" data-collection-products-count>
                    {
                      "productsCount": "{{ 'collection.general.products_count' | t: count: collection.products_count }}",
                      "showingCount": "{{ 'collection.general.showing_count' | t: offset: offset, page_size: page_size, count: paginate.items }}"
                    }
                  </script>
                </div>
              </div>
            {%- endif -%}
          </div>
        </div>
      {%- endpaginate -%}
    </div>
  </div>

  {%- if has_filters -%}
    <div id="mobile-collection-filters" class="drawer" aria-hidden="true">
      <div class="drawer__inner">
        <div class="collection-drawer">
          <header class="collection-drawer__header">
            <div>
              <button
                class="collection-drawer__close"
                data-action="close-drawer"
                title="{{ 'general.accessibility.close' | t | escape }}"
              >
                {%- render 'icon', icon: 'close' -%}
              </button>
              <span class="collection-drawer__title heading h3">
                {{- 'collection.filter.all' | t }}
                <span
                  class="collection-drawer__filter-count"
                  {% if active_filters_count == 0 %}
                    style="display: none"
                  {% endif %}
                  >({{ active_filters_count }})</span
                ></span
              >
            </div>

            <button
              class="button button--transparent button--extra-small"
              data-action="clear-filters"
              data-url="{{ collection.url }}?sort_by={{ sort_by }}"
              {% if active_filters_count == 0 %}
                style="display: none"
              {% endif %}
            >
              {{ 'collection.filter.clear' | t }}
            </button>
          </header>

          <form id="mobile-collection-filters-form" class="collection-drawer__inner">
            <input type="hidden" name="sort_by" value="{{ sort_by }}">

            {%- if collection.current_type != blank or collection.current_vendor != blank -%}
              <input
                type="hidden"
                name="q"
                value="{{ collection.current_vendor | default: collection.current_type | escape }}"
              >
            {%- endif -%}

            {%- if quick_links_menu.links.size > 0 -%}
              {%- capture link_id -%}filter-{% increment link_id %}{%- endcapture -%}

              <p class="collection-drawer__section-title">{{ quick_links_menu.title }}</p>

              <div class="collection__filter-group">
                <button
                  type="button"
                  class="collection__filter-group-name text--strong"
                  aria-expanded="false"
                  aria-controls="{{ link_id }}"
                  data-action="toggle-collapsible"
                  data-close-siblings="false"
                >
                  {{- 'collection.filter.select_category' | t -}}
                  {%- render 'icon', icon: 'arrow-bottom' -%}
                </button>

                <div id="{{ link_id }}" class="collection__filter-collapsible" aria-hidden="true">
                  <ul class="collection__filter-linklist" role="list">
                    {%- for link in quick_links_menu.links -%}
                      <li>
                        {%- if link.links.size > 0 -%}
                          {%- capture link_id -%}filter-{% increment link_id %}{%- endcapture -%}

                          <button
                            type="button"
                            class="collection__filter-link link link--primary {% if link.active or link.child_active %}is-active{% endif %}"
                            data-action="toggle-collapsible"
                            aria-controls="{{ link_id }}"
                            aria-expanded="false"
                          >
                            {{ link.title }}
                            {% if link.type == 'collection_link'
                              and section.settings.quick_links_show_products_count
                            -%}
                              ({{ link.object.products_count }})
                            {%- endif %}
                            {%- render 'icon', icon: 'arrow-bottom' -%}
                          </button>

                          <div id="{{ link_id }}" class="collection__filter-collapsible" aria-hidden="true">
                            <ul class="collection__filter-linklist" role="list">
                              {%- for sub_link in link.links -%}
                                <li>
                                  {%- if sub_link.links.size > 0 -%}
                                    {%- capture link_id -%}filter-{% increment link_id %}{%- endcapture -%}

                                    <button
                                      type="button"
                                      class="collection__filter-link link link--primary {% if sub_link.active or sub_link.child_active %}is-active{% endif %}"
                                      data-action="toggle-collapsible"
                                      aria-controls="{{ link_id }}"
                                      aria-expanded="{% if sub_link.active or sub_link.child_active %}true{% else %}false{% endif %}"
                                    >
                                      {{ sub_link.title }}
                                      {% if sub_link.type == 'collection_link'
                                        and section.settings.quick_links_show_products_count
                                      -%}
                                        ({{ sub_link.object.products_count }})
                                      {%- endif %}
                                      {%- render 'icon', icon: 'arrow-bottom' -%}
                                    </button>

                                    <div
                                      id="{{ link_id }}"
                                      class="collection__filter-collapsible"
                                      {% if sub_link.active or sub_link.child_active %}
                                        aria-hidden="false" style="height: auto; overflow: visible"
                                      {% else %}
                                        aria-hidden="true"
                                      {% endif %}
                                    >
                                      <ul class="collection__filter-linklist" role="list">
                                        {%- for sub_sub_link in sub_link.links -%}
                                          <li>
                                            <a
                                              href="{{ sub_sub_link.url }}"
                                              class="collection__filter-link link link--primary {% if sub_sub_link.active %}is-active{% endif %}"
                                            >
                                              {{- sub_sub_link.title }}
                                              {% if sub_sub_link.type == 'collection_link'
                                                and section.settings.quick_links_show_products_count
                                              -%}
                                                ({{ sub_sub_link.object.products_count }})
                                              {%- endif -%}
                                            </a>
                                          </li>
                                        {%- endfor -%}
                                      </ul>
                                    </div>
                                  {%- else -%}
                                    <a
                                      href="{{ sub_link.url }}"
                                      class="collection__filter-link link link--primary {% if sub_link.active %}is-active{% endif %}"
                                    >
                                      {{- sub_link.title }}
                                      {% if sub_link.type == 'collection_link'
                                        and section.settings.quick_links_show_products_count
                                      -%}
                                        ({{ sub_link.object.products_count }})
                                      {%- endif -%}
                                    </a>
                                  {%- endif -%}
                                </li>
                              {%- endfor -%}
                            </ul>
                          </div>
                        {%- else -%}
                          <a
                            href="{{ link.url }}"
                            class="collection__filter-link link link--primary {% if link.active or link.child_active %}is-active{% endif %}"
                          >
                            {{- link.title }}
                            {% if link.type == 'collection_link'
                              and section.settings.quick_links_show_products_count
                            -%}
                              ({{ link.object.products_count }})
                            {%- endif -%}
                          </a>
                        {%- endif -%}
                      </li>
                    {%- endfor -%}
                  </ul>
                </div>
              </div>
            {%- endif -%}

            {%- if section.settings.show_filters and collection.filters != empty -%}
              <p class="collection-drawer__section-title">{{ 'collection.filter.all' | t }}</p>

              {%- for filter in collection.filters -%}
                {%- if template.suffix == 'brand'
                  and filter.param_name == 'filter.p.vendor'
                  and filter.values.size == 1
                -%}
                  {%- continue -%}
                {%- endif -%}

                {%- assign filter_label_downcase = filter.label | downcase -%}

                {%- if color_label contains filter_label_downcase and section.settings.show_filter_color_swatch -%}
                  {%- assign show_color_swatch = true -%}
                {%- else -%}
                  {%- assign show_color_swatch = false -%}
                {%- endif -%}

                <div class="collection__filter-group">
                  {%- if filter.type == 'price_range' or filter.type == 'list' -%}
                    <button
                      type="button"
                      class="collection__filter-group-name link link--secondary text--strong"
                      data-action="toggle-collapsible"
                      aria-controls="mobile-{{ filter.param_name | handle | escape }}"
                      data-close-siblings="false"
                      data-collapsible-force-overflow="true"
                      aria-expanded="false"
                    >
                      <div>
                        {{- filter.label -}}

                        {%- if filter.type == 'list' and filter.active_values.size > 0 -%}
                          <span class="collection__filter-item-active">
                            {{- filter.active_values | map: 'label' | join: ', ' -}}
                          </span>
                        {%- elsif filter.type == 'price_range' and filter.min_value.value or filter.max_value.value -%}
                          <span class="collection__filter-item-active">
                            {{- filter.min_value.value | default: 0 | money_without_trailing_zeros }} -
                            {{ filter.max_value.value | default: filter.range_max | money_without_trailing_zeros -}}
                          </span>
                        {%- endif -%}
                      </div>

                      {%- render 'icon', icon: 'arrow-bottom' -%}
                    </button>
                  {%- else -%}
                    <div class="collection__filter-group-name link link--secondary text--strong">
                      <label for="{{ filter.param_name }}">{{- filter.label -}}</label>
                      <input
                        class="switch-checkbox"
                        type="checkbox"
                        name="{{ filter.param_name }}"
                        id="{{ filter.param_name }}"
                        value="1"
                        {% if filter.true_value.active %}
                          checked
                        {% endif %}
                      >
                    </div>
                  {%- endif -%}

                  <div
                    id="mobile-{{ filter.param_name | handle | escape }}"
                    class="collection__filter-collapsible"
                    aria-hidden="true"
                  >
                    {%- case filter.type -%}
                      {%- when 'list' -%}
                        {%- if filter.presentation == 'image' -%}
                          <div class="collection__filter-visual-filter-list">
                            <div class="visual-filter-list">
                              {%- for filter_value in filter.values -%}
                                {%- assign downcased_label = filter_value.label | downcase -%}

                                <div class="visual-filter">
                                  <input
                                    class="visual-filter__radio"
                                    type="checkbox"
                                    name="{{ filter_value.param_name }}"
                                    id="mobile-{{ filter_value.param_name }}-{{ filter_value.value }}"
                                    value="{{ filter_value.value }}"
                                    {% if filter_value.active %}
                                      checked
                                    {% endif %}
                                  >

                                  <label
                                    for="mobile-{{ filter_value.param_name }}-{{ filter_value.value }}"
                                    class="visual-filter__item {% if filter_value.active %}is-selected{% endif %}"
                                  >
                                    {%- if filter_value.image != blank -%}
                                      {{-
                                        filter_value.image
                                        | image_url: width: filter_value.image.width
                                        | image_tag: loading: 'lazy', widths: '32,64,96'
                                      -}}
                                    {%- endif -%}

                                    <span>{{- filter_value.label -}}</span>
                                  </label>
                                </div>
                              {%- endfor -%}
                            </div>
                          </div>
                        {%- elsif filter.presentation == 'swatch' -%}
                          <div class="collection__filter-color-list">
                            <div class="color-swatch-list color-swatch-list--large">
                              {%- for filter_value in filter.values -%}
                                {%- assign downcased_label = filter_value.label | downcase -%}

                                <div
                                  class="color-swatch {% if downcased_label == 'white' or downcased_label == 'blanc' %}color-swatch--white{% endif %}"
                                  data-tooltip="{{ filter_value.label | escape }}"
                                >
                                  <input
                                    class="color-swatch__radio"
                                    type="checkbox"
                                    name="{{ filter_value.param_name }}"
                                    id="mobile-{{ filter_value.param_name }}-{{ filter_value.value }}"
                                    value="{{ filter_value.value }}"
                                    {% if filter_value.active %}
                                      checked
                                    {% endif %}
                                  >

                                  <label
                                    for="mobile-{{ filter_value.param_name }}-{{ filter_value.value }}"
                                    class="color-swatch__item {% if filter_value.active %}is-selected{% endif %}"
                                    aria-label="{{ filter_value.label | escape }}"
                                  >
                                    <span
                                      class="color-swatch__item"
                                      style="{% render 'color-swatch-style', swatch: filter_value.swatch %}"
                                    ></span>
                                  </label>
                                </div>
                              {%- endfor -%}
                            </div>
                          </div>
                        {%- elsif show_color_swatch -%}
                          <div class="collection__filter-color-list">
                            <div class="color-swatch-list color-swatch-list--stack">
                              {%- assign color_swatch_config = settings.color_swatch_config
                                | newline_to_br
                                | split: '<br />'
                              -%}

                              {%- for filter_value in filter.values -%}
                                {%- assign downcased_value = filter_value.label | downcase -%}

                                <div class="color-swatch {% if downcased_value == 'white' or downcased_value == 'blanc' %}color-swatch--white{% endif %}">
                                  <input
                                    class="color-swatch__radio"
                                    type="checkbox"
                                    name="{{ filter.param_name }}"
                                    id="mobile-{{ filter_value.param_name }}-{{ filter_value.value }}"
                                    value="{{ filter_value.value }}"
                                    {% if filter_value.active %}
                                      checked
                                    {% endif %}
                                  >

                                  <label
                                    for="mobile-{{ filter_value.param_name }}-{{ filter_value.value }}"
                                    class="color-swatch__button color-swatch__button--labelled {% if filter_value.active %}is-selected{% endif %}"
                                  >
                                    <span
                                      class="color-swatch__item"
                                      style="{% render 'color-swatch-style', color_swatch_config: color_swatch_config, value: downcased_value %}"
                                    ></span>
                                    <span class="color-swatch__label">{{ filter_value.label }}</span>
                                  </label>
                                </div>
                              {%- endfor -%}
                            </div>
                          </div>
                        {%- else -%}
                          <ul class="collection__filter-checkbox-list" role="list">
                            {%- for filter_value in filter.values -%}
                              <li class="collection__filter-checkbox">
                                <div class="checkbox-wrapper">
                                  <input
                                    type="checkbox"
                                    class="checkbox"
                                    id="mobile-{{ filter_value.param_name }}-{{ filter_value.value }}"
                                    name="{{ filter.param_name }}"
                                    value="{{ filter_value.value }}"
                                    {% if filter_value.active %}
                                      checked="checked"
                                    {% endif %}
                                  >
                                  {% render 'icon', icon: 'check' %}
                                </div>

                                <label for="mobile-{{ filter_value.param_name }}-{{ filter_value.value }}">
                                  {{- filter_value.label }}
                                  {% if section.settings.quick_links_show_products_count -%}
                                    ({{ filter_value.count }})
                                  {%- endif -%}
                                </label>
                              </li>
                            {%- endfor -%}
                          </ul>
                        {%- endif -%}

                      {%- when 'price_range' -%}
                        <price-range class="price-range">
                          {%- assign min_value = filter.min_value.value | default: 0.0 | divided_by: 100.0 -%}
                          {%- assign max_value = filter.max_value.value
                            | default: filter.range_max
                            | divided_by: 100.0
                          -%}
                          {%- assign range_max = filter.range_max | divided_by: 100.0 | ceil -%}

                          {% assign lower_bound_progress = min_value | divided_by: range_max | times: 100.0 %}
                          {% assign higher_bound_progress = max_value | divided_by: range_max | times: 100.0 %}

                          <div
                            class="price-range__range-group range-group"
                            style="--range-min: {{ lower_bound_progress }}%; --range-max: {{ higher_bound_progress }}%"
                          >
                            <input
                              type="range"
                              aria-label="{{ 'collection.filter.price_filter_from' | t }}"
                              class="range"
                              min="0"
                              max="{{ range_max | ceil }}"
                              value="{{ min_value | ceil }}"
                            >
                            <input
                              type="range"
                              aria-label="{{ 'collection.filter.price_filter_to' | t }}"
                              class="range"
                              min="0"
                              max="{{ range_max | ceil }}"
                              value="{{ max_value | ceil }}"
                            >
                          </div>

                          <div class="price-range__input-group">
                            <div class="price-range__input input-prefix">
                              <span class="input-prefix__value">{{ cart.currency.symbol }}</span>
                              <input
                                aria-label="{{ 'collection.filter.price_filter_from' | t }}"
                                class="input-prefix__field"
                                type="number"
                                inputmode="numeric"
                                {% if filter.min_value.value %}
                                  value="{{ min_value | ceil }}"
                                {% endif %}
                                name="{{ filter.min_value.param_name }}"
                                min="0"
                                max="{{ max_value | ceil }}"
                                placeholder="0"
                              >
                            </div>

                            <span class="price-range__delimiter text--small">-</span>

                            <div class="price-range__input input-prefix">
                              <span class="input-prefix__value">{{ cart.currency.symbol }}</span>
                              <input
                                aria-label="{{ 'collection.filter.price_filter_to' | t }}"
                                class="input-prefix__field"
                                type="number"
                                inputmode="numeric"
                                {% if filter.max_value.value %}
                                  value="{{ max_value | ceil }}"
                                {% endif %}
                                name="{{ filter.max_value.param_name }}"
                                min="{{ min_value | ceil }}"
                                max="{{ range_max | ceil }}"
                                placeholder="{{ range_max | ceil }}"
                              >
                            </div>
                          </div>
                        </price-range>
                    {%- endcase -%}
                  </div>
                </div>
              {%- endfor -%}
            {%- endif -%}
          </form>

          <div class="collection-drawer__footer">
            <button type="button" class="button button--primary button--small button--full" data-action="close-drawer">
              {{ 'collection.filter.view_results' | t }}
            </button>
          </div>
        </div>
      </div>
    </div>
  {%- endif -%}

  <div id="modal-quick-view-{{ section.id }}" class="modal" aria-hidden="true">
    <div class="modal__dialog modal__dialog--stretch" role="dialog">
      <button
        class="modal__close link"
        data-action="close-modal"
        title="{{ 'general.accessibility.close' | t | escape }}"
      >
        {%- render 'icon', icon: 'close' -%}
      </button>

      <div class="modal__loader">
        {%- render 'icon', icon: 'search-loader' -%}
      </div>

      <div class="modal__inner"></div>
    </div>
  </div>
</section>

{% if template.suffix == 'updated_collection' %}
  <style>
    /* .color-filter-wrapper {
  display: flex;
  flex-direction: column;
  gap: 20px;
  
} */
    .ForFiltering img.product-item__primary-image.updated:hover {
      border-radius: 8px;
    }
    .ForFiltering img.product-item__primary-image.updated {
      object-fit: cover;
      object-position: center;
      border-radius: 0;
    }
    .ForFiltering .aspect-ratio {
      padding-bottom: 100% !important;
    }
    section.collection-product-banner.bottom-left.withoutimage {
      height: auto;
      color: black;
      width: 100%;
    }
    section.collection-product-banner.bottom-left.withoutimage .banner-overlay {
      width: 100%;
    }
    .withoutimage .banner-text {
      padding: 24px 24px 0 24px;
    }
    .withoutimage .banner-text h2 {
      margin: 0 !important;
    }
    .filter-modal2.active .filters-block-main {
      display: block !important;
    }
    .filter-modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 45px 0 41px;
      background-color: #f7f5ff;
    }
    .filter-modal2 {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.98);
      z-index: 9999;
      overflow-y: auto;
      transition: opacity 0.3s ease;
      opacity: 0;
      pointer-events: none;
    }
    .filter-modal2.active {
      display: block;
      opacity: 100%;
      pointer-events: auto;
      background: #f7f5ff;
      padding: 0 24px;
    }
    .color-filter-wrapper > .color-filter-block:first-child {
      display: none;
    }
    .color-filter-wrapper > .color-filter-block:last-child {
      display: none;
    }
    .sidebar-menu .filter-block {
      display: none;
    }
    .sidebar-menu > .filter-block:last-child {
      display: block;
    }
    .pagination__next svg {
      display: none;
    }
    .card .pagination {
      padding: 32px 0;
    }
    .product-list {
      padding-bottom: 38px;
    }
    .collection__toolbar:not(.collection__toolbar--bordered) {
      padding-bottom: 22px;
    }

    .pagination__prev,
    a.pagination__next.link {
      background: #ffebf7;
      padding: 10px;
      border-radius: 8px;
      font-size: 15px;
      font-weight: 700;
    }
    .pagination__prev svg {
      display: none;
    }
    .pagination__nav-item.is-active {
      border-radius: 8px;
    }
    .pagination__nav-item {
      background: #ffebf7;
      padding: 10px;
      border-radius: 8px;
    }
    /* .pagination{border: none;} */

    .color-filter-block {
      display: flex;
      flex-direction: column;
    }

    .color-filter-title {
      font-weight: 600;
      margin-bottom: 16px;
      font-size: 16px;
      color: #111;
    }

    .color-filter-list {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .color-filter-item {
      display: flex;
      align-items: center;
      gap: 12px;
      background: none;
      border: none;
      cursor: pointer;
      text-align: left;
    }

    .color-filter-swatch {
      width: 36px;
      height: 36px;
      border-radius: 5px;
      background-size: cover;
      background-position: center;
      flex-shrink: 0;
    }

    .color-filter-label {
      font-size: 15px;
      font-weight: 400;
      color: black;
    }

    .filter-btn {
      list-style: none;
      display: flex;
      align-items: center;
      border: 2px solid #f7f5ff;
      cursor: pointer;
      border-radius: 10px;
      width: 100%;
    }

    .filter-img {
      width: 90px;
      height: 64px;
      object-fit: cover;
      border-radius: 8px 0 0 8px;
    }

    .filter-label {
      padding: 18px 82px 18px 25px;
      font-size: 15px;
      font-weight: 700;
      color: black;
    }

    .product-item {
      padding: 0 !important;
    }
    .product-list {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr 1fr;
      grid-gap: 36px 24px;
    }
    .product-list--collection .product-item--vertical {
      width: 100%;
    }
    .product-item__title {
      font-size: 20px;
      font-weight: 700;
      line-height: 100%;
      margin: 16px 0 !important;
    }
    span.price.main_price {
      font-size: 16px !important;
      font-weight: 400;
      line-height: 100%;
      margin: 0 !important;
    }
    .price-filter {
      list-style: none;
    }
    .updated-sort-button {
      background-color: rgba(255, 235, 247, 1);
      color: rgba(164, 27, 107, 1);
      font-size: 15px;
      font-weight: 400;
      line-height: 100%;
      padding: 17px 12px;
      border-radius: 8px;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      border: none;
    }

    .custom-sort-icon {
      width: 16px;
      height: 16px;
      display: inline-block;
    }
    .updated-collection {
      display: flex;
      align-items: center;
      gap: 16px;
    }
    .updated-collection .collection__toolbar-item--sort {
      margin: 0 !important;
    }

    span.collection__showing-count.hidden-pocket.hidden-lap {
      font-size: 18px;
      font-weight: 700;
      line-height: 100%;
      color: black;
    }
    .filters-block-main {
      margin-top: 11px;
    }
    .collection__toolbar {
      margin: 0 !important;
      box-shadow: none !important;
      padding: 0 0 22px 0 !important;
    }
    .filter-button {
      display: none;
    }
    @media only screen and (max-width: 767.9px) {
      .collection-product-banner .checklist {
        flex-direction: column;
      }
    }
    @media only screen and (max-width: 600px) {
      .collection__toolbar--bordered {
        margin: 0 0 17px 0 !important;
        padding: 0 !important;
        box-shadow: none;
        display: flex;
        gap: 36px;
        flex-direction: column-reverse;
        align-items: flex-start;
      }
      .sidebar-menu {
        margin: 0 !important;
      }
      .collection__toolbar-item,
      .hidden-pocket {
        height: auto;
        display: block !important;
      }
      .product-list {
        grid-template-columns: 1fr 1fr;
      }
      .filter-button {
        display: flex !important;
        gap: 4px;
        justify-content: center;
        background-color: #ffebf7;
        color: black;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 400;
        cursor: pointer;
        font-size: 16px;
        width: 100%;
        text-align: center;
        margin: 0 0 16px;
      }

      .filters-block-main {
        display: none;
      }
      .updated-collection {
        justify-content: space-between;
        width: 100%;
      }
      .value-picker-wrapper {
        width: 100%;
      }
      .collection__toolbar-item.collection__toolbar-item--sort {
        width: 100%;
      }
      .updated-sort-button {
        width: 100%;
        justify-content: center;
      }
      .main-collection-layout {
        margin-top: 24px !important;
      }
    }
  </style>
{% endif %}

{% if IsUpdated %}
  <script>
    window.activeFilters = {
      productType: null,
      color: new Set(),
      prices: new Set(),
    };
    document.addEventListener('DOMContentLoaded', () => {
      const resetAllFilters = () => {
        const url = new URL(window.location.href);
        const viewParam = url.searchParams.get('view');
        url.search = '';
        if (viewParam) {
          url.searchParams.set('view', viewParam);
        }
        window.location.href = url.toString();
      };

      document.querySelectorAll('.reset-filters-btn').forEach((button) => {
        button.addEventListener('click', resetAllFilters);
      });
      setupAllFilterListeners();
    });
  </script>
  <script>
    window.handleProductTypeClick = (event) => {
      console.log("handleProductTypeClick");
      const button = event.currentTarget;
      const clickedType = button.getAttribute('data-filter');
    
      // Check if the clicked button is already active
      if (button.classList.contains('active')) {
        // If it's already active, deactivate it (toggle off)
        button.classList.remove('active');
        activeFilters.productType = null;
      } else {
        // If it's not active, activate it (toggle on)
        // First, remove 'active' from all other product type buttons
        document.querySelectorAll('.Button_filter').forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        activeFilters.productType = clickedType;
      }
    
      // Get the value to set
      let filterValue = '';
      if (activeFilters.productType) {
        filterValue = activeFilters.productType;
      }
    
      // Set this value to the element with class .MetaFilter
      const metaFilterElement = document.querySelector('.MetaFilter');
      if (metaFilterElement) {
        metaFilterElement.value = filterValue;
      }
      const eventpt = new Event('click', { bubbles: true });
      metaFilterElement.dispatchEvent(eventpt);
    }
    window.handleColorClick = (event) => {
      console.log("handleColorClick triggered");
      const button = event.currentTarget;
      const clickedColor = button.getAttribute('data-filter-color');
      console.log("Clicked Color:", clickedColor);
  
      if (activeFilters.color.has(clickedColor)) {
          activeFilters.color.delete(clickedColor);
          button.classList.remove('active');
          console.log(clickedColor + " deactivated. Current active colors:", Array.from(activeFilters.color));
      } else {
          activeFilters.color.add(clickedColor);
          button.classList.add('active');
          console.log(clickedColor + " activated. Current active colors:", Array.from(activeFilters.color));
      }
  
      const activeColorButtons = document.querySelectorAll('.color-filter-btn.active');
      const activeColors = [];
      activeColorButtons.forEach(activeButton => {
          const colorValue = activeButton.getAttribute('data-filter-color');
          if (colorValue) {
              activeColors.push(colorValue);
          }
      });
  
      const colorString = activeColors.join(',');
      console.log("Generated Color String:", colorString);
  
      const colorFilterElement = document.querySelector('.ColorFilter');
      if (colorFilterElement) {
          colorFilterElement.value = colorString;
          console.log(".ColorFilter value set to:", colorFilterElement.value);
          const eventC = new Event('click', { bubbles: true });
          colorFilterElement.dispatchEvent(eventC);
          console.log("Change event dispatched for .ColorFilter");
      } else {
          console.error("Element with class .ColorFilter not found!");
      }
    }
    window.handlePriceClick = (event) => {
      console.log("handlePriceClick triggered");
      const button = event.currentTarget.closest('.price-filter-btn-mainwrapper')?.querySelector('.price-filter-btn') || event.currentTarget;
      const min = button.getAttribute('data-min');
      const max = button.getAttribute('data-max');
      const rangeIdentifier = `${min}-${max}`;
      const parentWrapper = button.closest('.price-filter-btn-mainwrapper');
  
      console.log("Clicked Price Range:", rangeIdentifier);
      
      // Function to safely add event listeners
      const addChangeListener = function(elementId, targetSelector) {
        const element = document.getElementById(elementId);
        if (element) {
            element.addEventListener('change', function () {
                const value = this.value;
                console.log(`Value from ${elementId}:`, value);

                const targetElement = document.querySelector(targetSelector);
                if (targetElement) {
                    targetElement.value = value;
                    const event = new Event('click', {
                        bubbles: true
                    });
                    targetElement.dispatchEvent(event);
                } else {
                    console.warn(`Target element with selector "${targetSelector}" not found for ${elementId}.`);
                }
            });
        } else {
            console.warn(`Element with ID "${elementId}" not found. Event listener not attached.`);
        }
      }

      // Apply the function to your elements
      addChangeListener('disabledrangeminDesk', '.PriceStartFilter');
      addChangeListener('disabledrangemaxDesk', '.PriceEndFilter');
      addChangeListener('disabledrangeminMob', '.PriceStartFilter');
      addChangeListener('disabledrangemaxMob', '.PriceEndFilter');
     // Function to handle enabling/disabling inputs and setting listeners
      const toggleCustomInputs = (wrapper, enable) => {
          if (!wrapper) return;
          const minInput = wrapper.querySelector('#formincustomdesk');
          const maxInput = wrapper.querySelector('#formaxcustomdesk');
          const minInputmob = wrapper.querySelector('#formincustommob');
          const maxInputmob = wrapper.querySelector('#formaxcustommob');
          if (minInputmob) {
            minInputmob.disabled = !enable;
            if (enable) {
                minInputmob.removeEventListener('change', minInputChangeHandler);
                minInputmob.addEventListener('change', minInputChangeHandler);
            } else {
              minInputmob.removeEventListener('change', minInputChangeHandler);
              minInputmob.value = ''; 
            }
          }
          if (maxInputmob) {
            maxInputmob.disabled = !enable;
              if (enable) {
                  maxInputmob.removeEventListener('change', maxInputChangeHandler);
                  maxInputmob.addEventListener('change', maxInputChangeHandler);
              } else {
                maxInputmob.removeEventListener('change', maxInputChangeHandler);
                maxInputmob.value = ''; 
              }
          }
          if (minInput) {
            minInput.disabled = !enable;
            if (enable) {
                minInput.removeEventListener('change', minInputChangeHandler);
                minInput.addEventListener('change', minInputChangeHandler);
            } else {
                minInput.removeEventListener('change', minInputChangeHandler);
                minInput.value = ''; // Clear value when disabled
            }
          }
          if (maxInput) {
              maxInput.disabled = !enable;
              if (enable) {
                  maxInput.removeEventListener('change', maxInputChangeHandler);
                  maxInput.addEventListener('change', maxInputChangeHandler);
              } else {
                  maxInput.removeEventListener('change', maxInputChangeHandler);
                  maxInput.value = ''; // Clear value when disabled
              }
          }
      };
  
      // Handler for min input change
      const minInputChangeHandler = function() {
          const priceStartFilter = document.querySelector('.PriceStartFilter');
          if (priceStartFilter) {
              priceStartFilter.value = this.value;
              const eventps = new Event('click', {
                  bubbles: true
              });
              priceStartFilter.dispatchEvent(eventps);
              console.log("Change event dispatched for .PriceStartFilter");
          }
      };
  
      // Handler for max input change
      const maxInputChangeHandler = function() {
          const priceEndFilter = document.querySelector('.PriceEndFilter');
          if (priceEndFilter) {
              priceEndFilter.value = this.value;
              const eventpe = new Event('click', {
                  bubbles: true
              });
              priceEndFilter.dispatchEvent(eventpe);
              console.log("Change event dispatched for .PriceEndFilter");
          }
      };
  
    
      // If the clicked button is already active, deactivate it
      if (activeFilters.prices.has(rangeIdentifier)) {
          activeFilters.prices.clear(); // Clear all active prices
          // Remove 'active' class from all price filter buttons and their parent wrappers
          document.querySelectorAll('.price-filter-btn.active').forEach(btn => {
              btn.classList.remove('active');
              const wrapper = btn.closest('.price-filter-btn-mainwrapper');
              
              const pricerange = wrapper.querySelector('price-range.price-range');
              const minInput = wrapper.querySelector('#formincustomdesk');
              const maxInput = wrapper.querySelector('#formaxcustomdesk');
              const minInputmob = wrapper.querySelector('#formincustommob');
              const maxInputmob = wrapper.querySelector('#formaxcustommob');
              pricerange?.classList.add("ForDisplayNone");
              minInput?.classList.add("ForDisplayNone");
              maxInput?.classList.add("ForDisplayNone");
              minInputmob?.classList.add("ForDisplayNone");
              maxInputmob?.classList.add("ForDisplayNone");

              if (wrapper) {
                  wrapper.classList.remove('active');
                  toggleCustomInputs(wrapper, false); // Disable inputs
              }
          });
          console.log(rangeIdentifier + " deactivated. No active prices.");
      } else {
          // Deactivate all previously active price ranges
          activeFilters.prices.clear(); // Clear all previously active prices
          document.querySelectorAll('.price-filter-btn.active').forEach(btn => {
              btn.classList.remove('active');

              const wrapper = btn.closest('.price-filter-btn-mainwrapper');
              const pricerange = wrapper.querySelector('price-range.price-range');

              const minInput = wrapper.querySelector('#formincustomdesk');
              const maxInput = wrapper.querySelector('#formaxcustomdesk');
              const minInputmob = wrapper.querySelector('#formincustommob');
              const maxInputmob = wrapper.querySelector('#formaxcustommob');
              pricerange?.classList.add("ForDisplayNone");
              minInput?.classList.add("ForDisplayNone");
              maxInput?.classList.add("ForDisplayNone");
              minInputmob?.classList.add("ForDisplayNone");
              maxInputmob?.classList.add("ForDisplayNone");
              if (wrapper) {
                  wrapper.classList.remove('active');
                  toggleCustomInputs(wrapper, false); // Disable inputs
              }
          });
  
          // Activate the newly clicked price range
          activeFilters.prices.add(rangeIdentifier);
          button.classList.add('active');

          if (parentWrapper) {
              parentWrapper.classList.add('active');
              const pricerange = parentWrapper.querySelector('price-range.price-range');
              const minInput = parentWrapper.querySelector('#formincustomdesk');
              const maxInput = parentWrapper.querySelector('#formaxcustomdesk');
              const minInputmob = parentWrapper.querySelector('#formincustommob');
              const maxInputmob = parentWrapper.querySelector('#formaxcustommob');
              pricerange?.classList.remove("ForDisplayNone");
              minInput?.classList.remove("ForDisplayNone");
              maxInput?.classList.remove("ForDisplayNone");
              minInputmob?.classList.remove("ForDisplayNone");
              maxInputmob?.classList.remove("ForDisplayNone");

              toggleCustomInputs(parentWrapper, true); // Enable inputs and set listeners
          }
          console.log(rangeIdentifier + " activated. Current active prices:", Array.from(activeFilters.prices));
      }
  
      updatePriceRangeFilters();
    };
    window.updatePriceRangeFilters = () => {
        console.log("updatePriceRangeFilters is Called. Active price ranges:", Array.from(activeFilters.prices));
        let overallMin = '';
        let overallMax = '';
    
        // Since only one range can be active, we just need to get the first (and only) one
        if (activeFilters.prices.size > 0) {
            const activeRange = Array.from(activeFilters.prices)[0];
            const [minStr, maxStr] = activeRange.split('-');
            overallMin = parseInt(minStr);
            overallMax = parseInt(maxStr);
    
            if (isNaN(overallMin) || isNaN(overallMax)) {
                console.error("Invalid data-min or data-max attribute found in active range:", activeRange);
                overallMin = '';
                overallMax = '';
            }
            console.log("Calculated overallMin:", overallMin, "overallMax:", overallMax);
        } else {
            console.log("No active price filters. Resetting price ranges to empty.");
        }
    
        const priceStartFilter = document.querySelector('.PriceStartFilter');
        const priceEndFilter = document.querySelector('.PriceEndFilter');
    
        if (priceStartFilter) {
            priceStartFilter.value = overallMin;
            console.log(".PriceStartFilter value set to:", priceStartFilter.value);
            // It's generally better to dispatch a 'change' event for input fields
            const eventps = new Event('click', { bubbles: true });
            priceStartFilter.dispatchEvent(eventps);
            console.log("Change event dispatched for .PriceStartFilter");
        } else {
            console.error("Element with class .PriceStartFilter not found!");
        }
    
        if (priceEndFilter) {
            priceEndFilter.value = overallMax;
            console.log(".PriceEndFilter value set to:", priceEndFilter.value);
            // It's generally better to dispatch a 'change' event for input fields
            const eventpe = new Event('click', { bubbles: true });
            priceEndFilter.dispatchEvent(eventpe);
            console.log("Change event dispatched for .PriceEndFilter");
        } else {
            console.error("Element with class .PriceEndFilter not found!");
        }
    };
    window.setupAllFilterListeners = () => {
      document.querySelectorAll('.filters-block-main').forEach(section => {
        const showMoreBtn = section.querySelector('.showMorePrices');
        const showLessBtn = section.querySelector('.showLessPrices');
        const hiddenItems = section.querySelectorAll('.hidden-price');
  
        if (showMoreBtn && showLessBtn) {
          showMoreBtn.addEventListener('click', function () {
            hiddenItems.forEach(el => el.style.display = 'flex');
            showMoreBtn.style.display = 'none';
            showLessBtn.style.display = 'inline';
          });
  
          showLessBtn.addEventListener('click', function () {
            hiddenItems.forEach(el => el.style.display = 'none');
            showMoreBtn.style.display = 'inline';
            showLessBtn.style.display = 'none';
          });
        }
      });
      document.querySelectorAll('.Button_filter').forEach(button => {
        button.removeEventListener('click', handleProductTypeClick);
        button.addEventListener('click', handleProductTypeClick);
      });

      document.querySelectorAll('.color-filter-btn').forEach(button => {
        button.removeEventListener('click', handleColorClick);
        button.addEventListener('click', handleColorClick);
      });

      document.querySelectorAll('.price-filter-btn').forEach(button => {
        button.removeEventListener('click', handlePriceClick);
        button.addEventListener('click', handlePriceClick);
      });

      document.querySelectorAll('.price-icon-holder').forEach(icon => {
        icon.removeEventListener('click', handlePriceClick);
        icon.addEventListener('click', handlePriceClick);
      });

      {% comment %} applyFilters(); {% endcomment %}
    };
  </script>
{% endif %}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const openFilterBtn = document.getElementById('openMobileFilterBtn2');
    const closeFilterBtn = document.getElementById('closeMobileFilterBtn2');
    const filterModal = document.querySelector('.filter-modal2');

    if (openFilterBtn && filterModal) {
      openFilterBtn.addEventListener('click', () => {
        filterModal.classList.add('active');
        document.body.style.overflow = 'hidden';
      });
    }

    if (closeFilterBtn && filterModal) {
      closeFilterBtn.addEventListener('click', () => {
        filterModal.classList.remove('active');
        document.body.style.overflow = '';
      });
    }

    document.getElementById('resetHeaderBtn')?.addEventListener('click', () => {
      console.log('Reset header filters');
    });

    document.getElementById('applyHeaderBtn')?.addEventListener('click', () => {
      console.log('Apply header filters');
      filterModal.classList.remove('active');
      document.body.style.overflow = '';
    });

    document.getElementById('applyFilterBtn')?.addEventListener('click', () => {
      console.log('Apply footer filters');
      filterModal.classList.remove('active');
      document.body.style.overflow = '';
    });

    document.getElementById('resetFilterBtn')?.addEventListener('click', () => {
      console.log('Reset footer filters');
    });
  });
</script>
{% schema %}
{
  "name": "Collection",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_collection_image",
      "label": "Show collection image",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "collapse_collection_description",
      "label": "Collapse long description",
      "default": false
    },
    {
      "type": "text",
      "id": "ProductCountText",
      "label": "Products found text",
      "default": "Products Found"
    },
    {
      "type": "select",
      "id": "collection_image_size",
      "label": "Collection image size",
      "options": [
        {
          "value": "preserve_ratio",
          "label": "Original image ratio"
        },
        {
          "value": "small",
          "label": "Small"
        },
        {
          "value": "medium",
          "label": "Medium"
        },
        {
          "value": "large",
          "label": "Large"
        }
      ],
      "default": "small"
    },
    {
      "type": "select",
      "id": "products_per_row",
      "label": "Products per row (desktop)",
      "options": [
        {
          "value": "3",
          "label": "3"
        },
        {
          "value": "4",
          "label": "4"
        }
      ],
      "default": "4"
    },
    {
      "type": "range",
      "id": "default_products_per_page",
      "label": "Default products per page",
      "min": 24,
      "max": 48,
      "step": 12,
      "default": 24
    },
    {
      "type": "select",
      "id": "default_view_layout",
      "label": "Default view layout",
      "options": [
        {
          "value": "grid",
          "label": "Grid"
        },
        {
          "value": "list",
          "label": "List"
        }
      ],
      "default": "grid"
    },
    {
      "type": "select",
      "id": "show_quick_buy",
      "label": "Show quick buy on...",
      "options": [
        {
          "value": "list",
          "label": "List view"
        },
        {
          "value": "list_grid",
          "label": "List and grid views"
        }
      ],
      "default": "list"
    },
    {
      "type": "select",
      "id": "show_quick_view",
      "label": "Show quick view on...",
      "options": [
        {
          "value": "list",
          "label": "List view"
        },
        {
          "value": "list_grid",
          "label": "List and grid views"
        }
      ],
      "default": "list"
    },
    {
      "type": "header",
      "content": "Sidebar"
    },
    {
      "type": "link_list",
      "id": "quick_links",
      "label": "Quick links"
    },
    {
      "type": "checkbox",
      "id": "quick_links_show_products_count",
      "label": "Show products count",
      "info": "Only for collection links and filters",
      "default": true
    },
    {
      "type": "header",
      "content": "Filtering"
    },
    {
      "type": "checkbox",
      "id": "show_filters",
      "label": "Show filters",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_filter_color_swatch",
      "label": "Show filter color swatch",
      "info": "Requires a filter named \"Color\".",
      "default": true
    },
    {
      "type": "select",
      "id": "open_group_filters_mode",
      "label": "Filter opening mode (desktop)",
      "options": [
        {
          "value": "all_closed",
          "label": "All closed"
        },
        {
          "value": "all_open",
          "label": "All open"
        },
        {
          "value": "first_open",
          "label": "First open"
        }
      ],
      "default": "all_closed"
    }
  ],
  "blocks": [
    {
      "type": "filter_price",
      "name": "Filter Price",
      "settings": [
        {
          "type": "text",
          "id": "price_title",
          "label": "Filter Price Title",
          "default": "Price"
        },
        {
          "type": "text",
          "id": "filters_price",
          "label": "Filters (comma-separated)",
          "default": "Text,Image,All"
        },
        {
          "type": "text",
          "id": "filters_price_text",
          "label": "Price Range Text",
          "default": "Price range"
        }
      ]
    },
    {
      "type": "filter_group",
      "name": "Filter Group",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Filter Group Title",
          "default": "Style"
        },
        {
          "type": "text",
          "id": "filters_text",
          "label": "Filters (comma-separated)",
          "default": "Text,Image,All"
        },
        {
          "type": "textarea",
          "id": "filters_image",
          "label": "Filter Images (line-break separated)",
          "default": "https://cdn.shopify.com/xxx/text.png\nhttps://cdn.shopify.com/xxx/image.png\nhttps://cdn.shopify.com/xxx/all.png"
        }
      ]
    },
    {
      "type": "filter_block",
      "name": "Color Filter Block",
      "settings": [
        {
          "type": "text",
          "id": "filter_title_2",
          "label": "Filter Title",
          "default": "Colours"
        },
        {
          "type": "text",
          "id": "optionName",
          "label": "Option title for color option(eg: colors, Colours or Kleur)",
          "default": "Colours"
        },
        {
          "type": "text",
          "id": "filters_text_2",
          "label": "Filter Labels (comma-separated)",
          "default": "Yellow,Red,White,Orange"
        },
        {
          "type": "textarea",
          "id": "filters_image_2",
          "label": "Filter Images (line-break separated)",
          "default": "https://cdn.shopify.com/xxx/yellow.png\nhttps://cdn.shopify.com/xxx/red.png\nhttps://cdn.shopify.com/xxx/white.png\nhttps://cdn.shopify.com/xxx/orange.png"
        }
      ]
    }
  ]
}
{% endschema %}
